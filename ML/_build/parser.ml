type token =
  | INT of (Ast.info * int)
  | VAR of (Ast.info * string)
  | PLUS of (Ast.info)
  | MINUS of (Ast.info)
  | TIMES of (Ast.info)
  | DIV of (Ast.info)
  | MOD of (Ast.info)
  | LPAREN of (Ast.info)
  | RPAREN of (Ast.info)
  | TRUE of (Ast.info)
  | FALSE of (Ast.info)
  | EQUALS of (Ast.info)
  | NOTEQUALS of (Ast.info)
  | LT of (Ast.info)
  | LEQ of (Ast.info)
  | GT of (Ast.info)
  | GEQ of (Ast.info)
  | NOT of (Ast.info)
  | AND of (Ast.info)
  | OR of (Ast.info)
  | SKIP of (Ast.info)
  | ASSIGN of (Ast.info)
  | SEMI of (Ast.info)
  | IF of (Ast.info)
  | THEN of (Ast.info)
  | ELSE of (Ast.info)
  | WHILE of (Ast.info)
  | DO of (Ast.info)
  | LBRACE of (Ast.info)
  | RBRACE of (Ast.info)
  | PRINT of (Ast.info)
  | COMMA of (Ast.info)
  | COLON of (Ast.info)
  | ARROW of (Ast.info)
  | LAMBDA of (Ast.info)
  | T_INT of (Ast.info)
  | T_BOOL of (Ast.info)
  | T_UNIT of (Ast.info)
  | BRANCH of (Ast.info)
  | FOCUS of (Ast.info)
  | U of (Ast.info)
  | MUT of (Ast.info)
  | SLEEP of (Ast.info)
  | UNIT of (Ast.info)
  | LET of (Ast.info)
  | IN of (Ast.info)
  | DESTROY of (Ast.info)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
open Ast
open Printf
open Lexing

exception DuplicateField

let merge (fn,pos1,_) (_,_,pos2) = (fn,pos1,pos2)

let sort_field t_obj = 
  let sorted = List.sort_uniq (fun (x,_,_) (y,_,_) -> String.compare x y) t_obj in
  if List.length sorted <> List.length t_obj then raise DuplicateField
  else sorted

let sort_obj_field t_obj = 
  let sorted = List.sort_uniq (fun (x,_,_,_) (y,_,_,_) -> String.compare x y) t_obj in
  if List.length sorted <> List.length t_obj then raise DuplicateField
  else sorted
# 72 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* VAR *);
  259 (* PLUS *);
  260 (* MINUS *);
  261 (* TIMES *);
  262 (* DIV *);
  263 (* MOD *);
  264 (* LPAREN *);
  265 (* RPAREN *);
  266 (* TRUE *);
  267 (* FALSE *);
  268 (* EQUALS *);
  269 (* NOTEQUALS *);
  270 (* LT *);
  271 (* LEQ *);
  272 (* GT *);
  273 (* GEQ *);
  274 (* NOT *);
  275 (* AND *);
  276 (* OR *);
  277 (* SKIP *);
  278 (* ASSIGN *);
  279 (* SEMI *);
  280 (* IF *);
  281 (* THEN *);
  282 (* ELSE *);
  283 (* WHILE *);
  284 (* DO *);
  285 (* LBRACE *);
  286 (* RBRACE *);
  287 (* PRINT *);
  288 (* COMMA *);
  289 (* COLON *);
  290 (* ARROW *);
  291 (* LAMBDA *);
  292 (* T_INT *);
  293 (* T_BOOL *);
  294 (* T_UNIT *);
  295 (* BRANCH *);
  296 (* FOCUS *);
  297 (* U *);
  298 (* MUT *);
  299 (* SLEEP *);
  300 (* UNIT *);
  301 (* LET *);
  302 (* IN *);
  303 (* DESTROY *);
    0|]

let yylhs = "\255\255\
\007\000\007\000\007\000\007\000\007\000\008\000\008\000\009\000\
\009\000\003\000\003\000\003\000\003\000\004\000\004\000\005\000\
\005\000\005\000\005\000\006\000\006\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\002\000\000\000"

let yylen = "\002\000\
\001\000\001\000\005\000\003\000\001\000\001\000\003\000\001\000\
\003\000\003\000\004\000\005\000\006\000\001\000\003\000\003\000\
\004\000\004\000\005\000\001\000\003\000\002\000\002\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\009\000\004\000\004\000\004\000\
\001\000\001\000\001\000\001\000\003\000\003\000\003\000\003\000\
\009\000\005\000\005\000\005\000\003\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\043\000\000\000\000\000\000\000\041\000\042\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\055\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\054\000\000\000\000\000\000\000\045\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\047\000\
\000\000\038\000\000\000\000\000\000\000\000\000\000\000\000\000\
\021\000\000\000\000\000\000\000\009\000\000\000\000\000\040\000\
\039\000\015\000\000\000\050\000\000\000\000\000\000\000\000\000\
\001\000\002\000\005\000\000\000\000\000\000\000\052\000\051\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\004\000\000\000\000\000\012\000\000\000\000\000\000\000\
\007\000\000\000\013\000\000\000\049\000\003\000\037\000"

let yydgoto = "\002\000\
\054\000\019\000\067\000\055\000\029\000\030\000\124\000\125\000\
\033\000"

let yysindex = "\009\000\
\093\255\000\000\000\000\015\255\093\255\093\255\000\000\000\000\
\093\255\093\255\093\255\254\254\019\255\030\255\093\255\027\255\
\085\255\022\000\000\000\093\255\002\255\154\255\030\001\220\255\
\140\001\065\255\097\255\050\255\080\255\070\255\051\255\091\255\
\098\255\161\001\093\255\093\255\093\255\093\255\093\255\093\255\
\093\255\093\255\093\255\093\255\093\255\093\255\093\255\093\255\
\093\255\093\255\093\255\000\000\132\255\188\001\126\255\000\000\
\093\255\093\255\093\255\108\255\109\255\141\255\254\254\000\000\
\111\255\143\255\137\255\030\255\093\255\093\255\209\001\236\001\
\002\255\002\255\099\255\099\255\099\255\200\002\200\002\038\255\
\038\255\038\255\038\255\068\255\179\002\255\254\255\254\000\000\
\093\255\000\000\001\002\031\002\154\002\093\255\093\255\116\255\
\000\000\101\255\117\255\118\255\000\000\052\002\082\002\000\000\
\000\000\000\000\125\255\000\000\154\002\154\002\093\255\088\255\
\000\000\000\000\000\000\123\255\101\255\101\255\000\000\000\000\
\127\255\154\002\146\255\133\255\130\255\051\255\140\255\149\255\
\093\255\000\000\101\255\101\255\000\000\051\255\093\255\103\002\
\000\000\163\255\000\000\133\002\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\131\000\000\000\089\001\000\000\
\000\000\000\000\000\000\000\000\150\255\000\000\000\000\152\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\173\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\153\000\175\000\049\000\079\000\109\000\040\001\067\001\197\000\
\219\000\241\000\009\001\104\001\119\001\192\000\214\000\000\000\
\000\000\000\000\000\000\000\000\016\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\075\255\076\255\000\000\000\000\
\000\000\000\000\000\000\017\255\000\000\000\000\000\000\000\000\
\000\000\089\255\000\000\151\255\000\000\000\000\022\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\019\000\000\000\240\255\094\000\000\000\121\000\175\255\055\000\
\119\000"

let yytablesize = 1016
let yytable = "\026\000\
\044\000\037\000\038\000\039\000\040\000\041\000\039\000\040\000\
\041\000\001\000\042\000\043\000\044\000\045\000\046\000\047\000\
\116\000\048\000\049\000\018\000\050\000\052\000\020\000\021\000\
\022\000\010\000\031\000\023\000\024\000\025\000\011\000\032\000\
\010\000\034\000\035\000\127\000\128\000\011\000\027\000\028\000\
\037\000\038\000\039\000\040\000\041\000\016\000\053\000\016\000\
\028\000\053\000\138\000\061\000\065\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\037\000\038\000\
\039\000\040\000\041\000\091\000\092\000\093\000\029\000\042\000\
\043\000\044\000\045\000\046\000\047\000\053\000\048\000\102\000\
\103\000\065\000\062\000\066\000\036\000\003\000\004\000\123\000\
\005\000\059\000\060\000\064\000\006\000\112\000\007\000\008\000\
\017\000\018\000\017\000\018\000\030\000\133\000\009\000\063\000\
\109\000\110\000\112\000\053\000\010\000\139\000\019\000\011\000\
\019\000\012\000\068\000\113\000\114\000\115\000\069\000\013\000\
\066\000\122\000\022\000\014\000\015\000\088\000\090\000\016\000\
\113\000\114\000\115\000\017\000\094\000\095\000\096\000\098\000\
\099\000\100\000\053\000\136\000\111\000\117\000\121\000\118\000\
\026\000\140\000\126\000\129\000\037\000\038\000\039\000\040\000\
\041\000\130\000\056\000\132\000\131\000\042\000\043\000\044\000\
\045\000\046\000\047\000\134\000\048\000\049\000\027\000\050\000\
\051\000\135\000\142\000\020\000\008\000\014\000\106\000\097\000\
\006\000\137\000\101\000\000\000\000\000\000\000\000\000\053\000\
\000\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000\
\000\000\053\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\
\000\000\000\000\032\000\000\000\000\000\000\000\037\000\038\000\
\039\000\040\000\041\000\000\000\000\000\000\000\000\000\042\000\
\043\000\044\000\045\000\046\000\047\000\000\000\048\000\049\000\
\033\000\050\000\051\000\000\000\000\000\000\000\000\000\000\000\
\057\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\044\000\044\000\044\000\044\000\044\000\
\034\000\044\000\000\000\053\000\044\000\044\000\044\000\044\000\
\044\000\044\000\000\000\044\000\044\000\000\000\044\000\044\000\
\037\000\038\000\039\000\040\000\041\000\044\000\044\000\000\000\
\044\000\042\000\043\000\044\000\045\000\046\000\047\000\036\000\
\048\000\049\000\000\000\050\000\051\000\000\000\000\000\000\000\
\044\000\000\000\000\000\028\000\028\000\028\000\028\000\028\000\
\000\000\028\000\000\000\000\000\028\000\028\000\028\000\028\000\
\028\000\028\000\035\000\028\000\028\000\053\000\028\000\028\000\
\000\000\000\000\000\000\000\000\000\000\028\000\028\000\000\000\
\028\000\029\000\029\000\029\000\029\000\029\000\000\000\029\000\
\023\000\000\000\029\000\029\000\029\000\029\000\029\000\029\000\
\000\000\029\000\029\000\000\000\029\000\029\000\000\000\024\000\
\000\000\000\000\000\000\029\000\029\000\000\000\029\000\030\000\
\030\000\030\000\030\000\030\000\000\000\030\000\025\000\000\000\
\030\000\030\000\030\000\030\000\030\000\030\000\000\000\030\000\
\030\000\000\000\030\000\030\000\000\000\022\000\022\000\000\000\
\000\000\030\000\030\000\022\000\030\000\000\000\022\000\022\000\
\022\000\022\000\022\000\022\000\000\000\022\000\022\000\000\000\
\022\000\022\000\000\000\026\000\026\000\000\000\000\000\022\000\
\022\000\026\000\022\000\000\000\026\000\026\000\026\000\026\000\
\026\000\026\000\000\000\026\000\026\000\000\000\026\000\026\000\
\000\000\027\000\027\000\000\000\000\000\026\000\026\000\027\000\
\026\000\000\000\027\000\027\000\027\000\027\000\027\000\027\000\
\000\000\027\000\027\000\000\000\027\000\027\000\000\000\000\000\
\053\000\000\000\000\000\027\000\027\000\031\000\027\000\000\000\
\031\000\031\000\031\000\031\000\031\000\031\000\053\000\031\000\
\031\000\000\000\031\000\031\000\053\000\053\000\048\000\053\000\
\000\000\031\000\031\000\032\000\031\000\000\000\032\000\032\000\
\032\000\032\000\032\000\032\000\000\000\032\000\032\000\000\000\
\032\000\032\000\048\000\048\000\000\000\048\000\000\000\032\000\
\032\000\033\000\032\000\000\000\033\000\033\000\033\000\033\000\
\033\000\033\000\000\000\033\000\033\000\000\000\033\000\033\000\
\000\000\000\000\000\000\000\000\000\000\033\000\033\000\000\000\
\033\000\034\000\000\000\000\000\034\000\034\000\034\000\034\000\
\034\000\034\000\000\000\034\000\034\000\000\000\034\000\034\000\
\037\000\038\000\039\000\040\000\041\000\034\000\034\000\000\000\
\034\000\042\000\043\000\044\000\045\000\046\000\047\000\000\000\
\036\000\000\000\000\000\036\000\036\000\000\000\000\000\000\000\
\000\000\000\000\036\000\036\000\000\000\036\000\036\000\000\000\
\000\000\000\000\000\000\000\000\036\000\036\000\000\000\036\000\
\000\000\000\000\000\000\035\000\000\000\053\000\035\000\035\000\
\000\000\000\000\000\000\000\000\000\000\035\000\035\000\000\000\
\035\000\035\000\000\000\000\000\000\000\000\000\000\000\035\000\
\035\000\023\000\035\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\023\000\023\000\000\000\023\000\023\000\
\024\000\000\000\000\000\000\000\000\000\023\000\023\000\000\000\
\023\000\000\000\000\000\024\000\000\000\024\000\024\000\025\000\
\000\000\000\000\000\000\000\000\024\000\024\000\000\000\024\000\
\000\000\000\000\000\000\000\000\025\000\025\000\037\000\038\000\
\039\000\040\000\041\000\025\000\025\000\000\000\025\000\042\000\
\043\000\044\000\045\000\046\000\047\000\000\000\048\000\049\000\
\000\000\050\000\051\000\037\000\038\000\039\000\040\000\041\000\
\058\000\000\000\000\000\000\000\042\000\043\000\044\000\045\000\
\046\000\047\000\000\000\048\000\049\000\000\000\050\000\051\000\
\000\000\000\000\000\000\053\000\000\000\070\000\037\000\038\000\
\039\000\040\000\041\000\000\000\000\000\000\000\000\000\042\000\
\043\000\044\000\045\000\046\000\047\000\000\000\048\000\049\000\
\053\000\050\000\051\000\037\000\038\000\039\000\040\000\041\000\
\000\000\104\000\000\000\089\000\042\000\043\000\044\000\045\000\
\046\000\047\000\000\000\048\000\049\000\000\000\050\000\051\000\
\000\000\000\000\000\000\053\000\000\000\000\000\037\000\038\000\
\039\000\040\000\041\000\000\000\105\000\000\000\000\000\042\000\
\043\000\044\000\045\000\046\000\047\000\000\000\048\000\049\000\
\053\000\050\000\051\000\037\000\038\000\039\000\040\000\041\000\
\000\000\000\000\000\000\000\000\042\000\043\000\044\000\045\000\
\046\000\047\000\000\000\048\000\049\000\000\000\050\000\051\000\
\000\000\000\000\000\000\053\000\000\000\000\000\107\000\000\000\
\000\000\037\000\038\000\039\000\040\000\041\000\000\000\000\000\
\000\000\000\000\042\000\043\000\044\000\045\000\046\000\047\000\
\053\000\048\000\049\000\000\000\050\000\051\000\037\000\038\000\
\039\000\040\000\041\000\000\000\108\000\000\000\000\000\042\000\
\043\000\044\000\045\000\046\000\047\000\000\000\048\000\049\000\
\000\000\050\000\051\000\000\000\000\000\000\000\053\000\000\000\
\000\000\119\000\000\000\000\000\037\000\038\000\039\000\040\000\
\041\000\000\000\000\000\000\000\000\000\042\000\043\000\044\000\
\045\000\046\000\047\000\053\000\048\000\049\000\000\000\050\000\
\051\000\037\000\038\000\039\000\040\000\041\000\000\000\120\000\
\000\000\000\000\042\000\043\000\044\000\045\000\046\000\047\000\
\000\000\048\000\049\000\000\000\050\000\051\000\000\000\000\000\
\000\000\053\000\000\000\000\000\141\000\000\000\000\000\037\000\
\038\000\039\000\040\000\041\000\000\000\000\000\000\000\000\000\
\042\000\043\000\044\000\045\000\046\000\047\000\053\000\048\000\
\049\000\000\000\050\000\051\000\037\000\038\000\039\000\040\000\
\041\000\000\000\143\000\000\000\000\000\042\000\043\000\044\000\
\045\000\046\000\047\000\000\000\048\000\049\000\000\000\050\000\
\051\000\000\000\000\000\000\000\053\000\037\000\038\000\039\000\
\040\000\041\000\000\000\000\000\000\000\000\000\042\000\043\000\
\044\000\045\000\046\000\047\000\000\000\048\000\049\000\000\000\
\000\000\053\000\037\000\038\000\039\000\040\000\041\000\000\000\
\000\000\000\000\000\000\000\000\000\000\044\000\045\000\046\000\
\047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\053\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\053\000"

let yycheck = "\002\001\
\000\000\003\001\004\001\005\001\006\001\007\001\005\001\006\001\
\007\001\001\000\012\001\013\001\014\001\015\001\016\001\017\001\
\098\000\019\001\020\001\001\000\022\001\000\000\008\001\005\000\
\006\000\009\001\008\001\009\000\010\000\011\000\009\001\002\001\
\016\001\015\000\008\001\117\000\118\000\016\001\041\001\042\001\
\003\001\004\001\005\001\006\001\007\001\030\001\048\001\032\001\
\000\000\048\001\132\000\002\001\002\001\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\048\000\049\000\050\000\051\000\003\001\004\001\
\005\001\006\001\007\001\057\000\058\000\059\000\000\000\012\001\
\013\001\014\001\015\001\016\001\017\001\048\001\019\001\069\000\
\070\000\002\001\041\001\041\001\008\001\001\001\002\001\112\000\
\004\001\033\001\002\001\030\001\008\001\014\001\010\001\011\001\
\030\001\030\001\032\001\032\001\000\000\126\000\018\001\032\001\
\094\000\095\000\014\001\048\001\024\001\134\000\030\001\027\001\
\032\001\029\001\032\001\036\001\037\001\038\001\029\001\035\001\
\041\001\111\000\000\000\039\001\040\001\002\001\009\001\043\001\
\036\001\037\001\038\001\047\001\033\001\033\001\002\001\033\001\
\002\001\009\001\048\001\129\000\033\001\033\001\026\001\034\001\
\000\000\135\000\032\001\029\001\003\001\004\001\005\001\006\001\
\007\001\016\001\009\001\034\001\032\001\012\001\013\001\014\001\
\015\001\016\001\017\001\032\001\019\001\020\001\000\000\022\001\
\023\001\029\001\016\001\030\001\029\001\009\001\089\000\063\000\
\034\001\131\000\068\000\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\048\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\003\001\004\001\
\005\001\006\001\007\001\255\255\255\255\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\020\001\
\000\000\022\001\023\001\255\255\255\255\255\255\255\255\255\255\
\029\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\005\001\006\001\007\001\
\000\000\009\001\255\255\048\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\023\001\
\003\001\004\001\005\001\006\001\007\001\029\001\030\001\255\255\
\032\001\012\001\013\001\014\001\015\001\016\001\017\001\000\000\
\019\001\020\001\255\255\022\001\023\001\255\255\255\255\255\255\
\048\001\255\255\255\255\003\001\004\001\005\001\006\001\007\001\
\255\255\009\001\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\000\000\019\001\020\001\048\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\255\255\
\032\001\003\001\004\001\005\001\006\001\007\001\255\255\009\001\
\000\000\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\255\255\022\001\023\001\255\255\000\000\
\255\255\255\255\255\255\029\001\030\001\255\255\032\001\003\001\
\004\001\005\001\006\001\007\001\255\255\009\001\000\000\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\022\001\023\001\255\255\003\001\004\001\255\255\
\255\255\029\001\030\001\009\001\032\001\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\255\255\
\022\001\023\001\255\255\003\001\004\001\255\255\255\255\029\001\
\030\001\009\001\032\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\023\001\
\255\255\003\001\004\001\255\255\255\255\029\001\030\001\009\001\
\032\001\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\255\255\022\001\023\001\255\255\255\255\
\009\001\255\255\255\255\029\001\030\001\009\001\032\001\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\023\001\019\001\
\020\001\255\255\022\001\023\001\029\001\030\001\009\001\032\001\
\255\255\029\001\030\001\009\001\032\001\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\255\255\
\022\001\023\001\029\001\030\001\255\255\032\001\255\255\029\001\
\030\001\009\001\032\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\255\255\
\032\001\009\001\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\023\001\
\003\001\004\001\005\001\006\001\007\001\029\001\030\001\255\255\
\032\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\009\001\255\255\255\255\012\001\013\001\255\255\255\255\255\255\
\255\255\255\255\019\001\020\001\255\255\022\001\023\001\255\255\
\255\255\255\255\255\255\255\255\029\001\030\001\255\255\032\001\
\255\255\255\255\255\255\009\001\255\255\048\001\012\001\013\001\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\255\255\
\022\001\023\001\255\255\255\255\255\255\255\255\255\255\029\001\
\030\001\009\001\032\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\255\255\022\001\023\001\
\009\001\255\255\255\255\255\255\255\255\029\001\030\001\255\255\
\032\001\255\255\255\255\020\001\255\255\022\001\023\001\009\001\
\255\255\255\255\255\255\255\255\029\001\030\001\255\255\032\001\
\255\255\255\255\255\255\255\255\022\001\023\001\003\001\004\001\
\005\001\006\001\007\001\029\001\030\001\255\255\032\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\020\001\
\255\255\022\001\023\001\003\001\004\001\005\001\006\001\007\001\
\029\001\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\023\001\
\255\255\255\255\255\255\048\001\255\255\029\001\003\001\004\001\
\005\001\006\001\007\001\255\255\255\255\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\020\001\
\048\001\022\001\023\001\003\001\004\001\005\001\006\001\007\001\
\255\255\009\001\255\255\032\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\023\001\
\255\255\255\255\255\255\048\001\255\255\255\255\003\001\004\001\
\005\001\006\001\007\001\255\255\009\001\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\020\001\
\048\001\022\001\023\001\003\001\004\001\005\001\006\001\007\001\
\255\255\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\255\255\022\001\023\001\
\255\255\255\255\255\255\048\001\255\255\255\255\030\001\255\255\
\255\255\003\001\004\001\005\001\006\001\007\001\255\255\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\048\001\019\001\020\001\255\255\022\001\023\001\003\001\004\001\
\005\001\006\001\007\001\255\255\030\001\255\255\255\255\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\019\001\020\001\
\255\255\022\001\023\001\255\255\255\255\255\255\048\001\255\255\
\255\255\030\001\255\255\255\255\003\001\004\001\005\001\006\001\
\007\001\255\255\255\255\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\048\001\019\001\020\001\255\255\022\001\
\023\001\003\001\004\001\005\001\006\001\007\001\255\255\030\001\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\255\255\022\001\023\001\255\255\255\255\
\255\255\048\001\255\255\255\255\030\001\255\255\255\255\003\001\
\004\001\005\001\006\001\007\001\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\048\001\019\001\
\020\001\255\255\022\001\023\001\003\001\004\001\005\001\006\001\
\007\001\255\255\030\001\255\255\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\019\001\020\001\255\255\022\001\
\023\001\255\255\255\255\255\255\048\001\003\001\004\001\005\001\
\006\001\007\001\255\255\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\255\255\
\255\255\048\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\255\255\255\255\255\255\255\255\014\001\015\001\016\001\
\017\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\048\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\048\001"

let yynames_const = "\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  VAR\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  MOD\000\
  LPAREN\000\
  RPAREN\000\
  TRUE\000\
  FALSE\000\
  EQUALS\000\
  NOTEQUALS\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  NOT\000\
  AND\000\
  OR\000\
  SKIP\000\
  ASSIGN\000\
  SEMI\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  LBRACE\000\
  RBRACE\000\
  PRINT\000\
  COMMA\000\
  COLON\000\
  ARROW\000\
  LAMBDA\000\
  T_INT\000\
  T_BOOL\000\
  T_UNIT\000\
  BRANCH\000\
  FOCUS\000\
  U\000\
  MUT\000\
  SLEEP\000\
  UNIT\000\
  LET\000\
  IN\000\
  DESTROY\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.info) in
    Obj.repr(
# 64 "parser.mly"
        (T_int)
# 533 "parser.ml"
               : Ast.gtype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.info) in
    Obj.repr(
# 65 "parser.mly"
         (T_bool)
# 540 "parser.ml"
               : Ast.gtype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Ast.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Ast.gtype list ) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ast.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Ast.gtype) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Ast.info) in
    Obj.repr(
# 66 "parser.mly"
                            (T_func(_2, _4))
# 551 "parser.ml"
               : Ast.gtype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : (Ast.var * Ast.gtype * bool) list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.info) in
    Obj.repr(
# 67 "parser.mly"
                  (T_obj(sort_field _2))
# 560 "parser.ml"
               : Ast.gtype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.info) in
    Obj.repr(
# 68 "parser.mly"
         (T_unit)
# 567 "parser.ml"
               : Ast.gtype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.gtype) in
    Obj.repr(
# 71 "parser.mly"
       ([_1])
# 574 "parser.ml"
               : Ast.gtype list ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.gtype) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.gtype list ) in
    Obj.repr(
# 72 "parser.mly"
                      (_1 :: _3)
# 583 "parser.ml"
               : Ast.gtype list ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.info * string) in
    Obj.repr(
# 75 "parser.mly"
      ([snd _1])
# 590 "parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.info * string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string list) in
    Obj.repr(
# 76 "parser.mly"
                    ((snd _1)::_3)
# 599 "parser.ml"
               : string list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.info * string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.gtype) in
    Obj.repr(
# 79 "parser.mly"
                 ([(snd _1, _3, false)])
# 608 "parser.ml"
               : (Ast.var * Ast.gtype * bool) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ast.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.info * string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.gtype) in
    Obj.repr(
# 80 "parser.mly"
                   ([(snd _2, _4, true)])
# 618 "parser.ml"
               : (Ast.var * Ast.gtype * bool) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Ast.info * string) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ast.gtype) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : (Ast.var * Ast.gtype * bool) list) in
    Obj.repr(
# 81 "parser.mly"
                                 ((snd _1, _3, false)::_5)
# 629 "parser.ml"
               : (Ast.var * Ast.gtype * bool) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Ast.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ast.info * string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Ast.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ast.gtype) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : (Ast.var * Ast.gtype * bool) list) in
    Obj.repr(
# 82 "parser.mly"
                                   ((snd _2, _4, true)::_6)
# 641 "parser.ml"
               : (Ast.var * Ast.gtype * bool) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 85 "parser.mly"
       ([_1])
# 648 "parser.ml"
               : Ast.expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr list) in
    Obj.repr(
# 86 "parser.mly"
                      (_1::_3)
# 657 "parser.ml"
               : Ast.expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.info * string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 89 "parser.mly"
                   ( (snd _1, _3, false, false) )
# 666 "parser.ml"
               : string * Ast.expr * bool * bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ast.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.info * string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 90 "parser.mly"
                     ( (snd _2, _4, true, false) )
# 676 "parser.ml"
               : string * Ast.expr * bool * bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ast.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.info * string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 91 "parser.mly"
                       ( (snd _2, _4, false, true) )
# 686 "parser.ml"
               : string * Ast.expr * bool * bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Ast.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ast.info * string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 92 "parser.mly"
                         ( (snd _3, _5, true, true) )
# 697 "parser.ml"
               : string * Ast.expr * bool * bool))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string * Ast.expr * bool * bool) in
    Obj.repr(
# 95 "parser.mly"
             ([_1])
# 704 "parser.ml"
               : (string * Ast.expr * bool * bool) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string * Ast.expr * bool * bool) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : (string * Ast.expr * bool * bool) list) in
    Obj.repr(
# 96 "parser.mly"
                                 (_1::_3)
# 713 "parser.ml"
               : (string * Ast.expr * bool * bool) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 99 "parser.mly"
               ( Neg(_2) )
# 721 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 100 "parser.mly"
             ( Not(_2) )
# 729 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 101 "parser.mly"
                  ( Binary(BinopAnd, _1, _3) )
# 738 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 102 "parser.mly"
                 ( Binary(BinopOr, _1, _3) )
# 747 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 103 "parser.mly"
                   ( Binary(BinopPlus, _1, _3) )
# 756 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 104 "parser.mly"
                    ( Binary(BinopMinus, _1, _3) )
# 765 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 105 "parser.mly"
                    ( Binary(BinopTimes, _1, _3) )
# 774 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 106 "parser.mly"
                  ( Binary(BinopDiv, _1, _3) )
# 783 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 107 "parser.mly"
                  ( Binary(BinopMod, _1, _3) )
# 792 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 108 "parser.mly"
                 ( Binary(BinopLt, _1, _3) )
# 801 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 109 "parser.mly"
                  ( Binary(BinopLeq, _1, _3) )
# 810 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 110 "parser.mly"
                 ( Binary(BinopGt, _1, _3) )
# 819 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 111 "parser.mly"
                  ( Binary(BinopGeq, _1, _3) )
# 828 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 112 "parser.mly"
                        ( Binary(BinopNeq, _1, _3) )
# 837 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 113 "parser.mly"
                     ( Binary(BinopEq, _1, _3) )
# 846 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : Ast.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : (Ast.var * Ast.gtype * bool) list) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Ast.info) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : Ast.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Ast.gtype) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Ast.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Ast.info) in
    Obj.repr(
# 114 "parser.mly"
                                                                 ( Fun(_3, _6, _8) )
# 861 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ast.info * string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr list) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.info) in
    Obj.repr(
# 115 "parser.mly"
                               (  Apply(snd _1, _3) )
# 871 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ast.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.info) in
    Obj.repr(
# 116 "parser.mly"
                               (  Destroy(_3) )
# 881 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ast.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Ast.info) in
    Obj.repr(
# 117 "parser.mly"
                             (  Sleep(_3) )
# 891 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.info) in
    Obj.repr(
# 118 "parser.mly"
                         ( Bool(true) )
# 898 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.info) in
    Obj.repr(
# 119 "parser.mly"
                         ( Bool(false) )
# 905 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.info * int) in
    Obj.repr(
# 120 "parser.mly"
                         ( Int(snd _1) )
# 912 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.info * string) in
    Obj.repr(
# 121 "parser.mly"
                         ( Var(snd _1) )
# 919 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.info) in
    Obj.repr(
# 122 "parser.mly"
                         ( _2 )
# 928 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : (string * Ast.expr * bool * bool) list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.info) in
    Obj.repr(
# 123 "parser.mly"
                                ( Object(sort_obj_field _2) )
# 937 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.info * string) in
    Obj.repr(
# 124 "parser.mly"
                 ( Get(_1, snd _3) )
# 945 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 125 "parser.mly"
                               ( Seq(_1, _3) )
# 954 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : Ast.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : Ast.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : Ast.expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : Ast.info) in
    let _6 = (Parsing.peek_val __caml_parser_env 3 : Ast.info) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : Ast.info) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : Ast.info) in
    Obj.repr(
# 126 "parser.mly"
                                                        ( If(_2, _4, _8) )
# 969 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Ast.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ast.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Ast.info) in
    Obj.repr(
# 127 "parser.mly"
                                      ( While(_2, _4) )
# 980 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Ast.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ast.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Ast.info) in
    Obj.repr(
# 128 "parser.mly"
                                      ( Focus(_2, _4) )
# 991 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Ast.info) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string list) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Ast.info) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Ast.info) in
    Obj.repr(
# 129 "parser.mly"
                                          ( Branch(_2, _4) )
# 1002 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.info) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 130 "parser.mly"
                     ( Assign(_1, _3) )
# 1011 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.expr) in
    Obj.repr(
# 133 "parser.mly"
                             ( _1 )
# 1018 "parser.ml"
               : Ast.expr))
(* Entry p *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let p (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.expr)
