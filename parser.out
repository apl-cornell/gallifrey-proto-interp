Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> expr
Rule 2     simple_type -> INT
Rule 3     simple_type -> BOOL
Rule 4     simple_type -> UNIT
Rule 5     type -> simple_type
Rule 6     tlist -> type COMMA type
Rule 7     tlist -> type COMMA tlist
Rule 8     type -> LT paramlist GT
Rule 9     type -> LT param GT
Rule 10    type -> LBRAC tlist ARROW type RBRAC
Rule 11    type -> LBRAC type ARROW type RBRAC
Rule 12    type -> LBRAC ARROW type RBRAC
Rule 13    qualifier -> A
Rule 14    qualifier -> B
Rule 15    qualifier -> U
Rule 16    expr -> LET ID IN expr
Rule 17    expr -> LET ID ID ASSIGN expr IN expr
Rule 18    expr -> expr ASSIGN expr
Rule 19    expr -> IF expr THEN expr ELSE expr END
Rule 20    expr -> WHILE expr DO expr END
Rule 21    expr -> expr SEMICOLON expr
Rule 22    expr -> PRINT LPAREN expr RPAREN
Rule 23    expr -> DESTROY LPAREN expr RPAREN
Rule 24    expr -> expr DOT ID
Rule 25    expr -> expr PLUS expr
Rule 26    expr -> expr MINUS expr
Rule 27    expr -> expr TIMES expr
Rule 28    expr -> expr DIVIDE expr
Rule 29    expr -> expr AND expr
Rule 30    expr -> expr OR expr
Rule 31    expr -> expr EQ expr
Rule 32    expr -> expr GT expr
Rule 33    expr -> expr GTE expr
Rule 34    expr -> expr LT expr
Rule 35    expr -> expr LTE expr
Rule 36    expr -> expr NEQ expr
Rule 37    expr -> expr MOD expr
Rule 38    expr -> MINUS expr
Rule 39    expr -> NOT expr
Rule 40    expr -> TIMES expr
Rule 41    expr -> expr REF
Rule 42    expr -> LPAREN expr RPAREN
Rule 43    expr -> LPAREN RPAREN
Rule 44    expr -> INT_LITERAL
Rule 45    expr -> BOOL_LITERAL
Rule 46    expr -> ID
Rule 47    varlist -> ID COMMA ID
Rule 48    varlist -> ID COMMA varlist
Rule 49    expr -> BRANCH LPAREN varlist RPAREN expr END
Rule 50    expr -> BRANCH LPAREN ID RPAREN expr END
Rule 51    expr -> BRANCH LPAREN RPAREN expr END
Rule 52    field -> ID ASSIGN qualifier expr
Rule 53    fieldlist -> field COMMA field
Rule 54    fieldlist -> field COMMA fieldlist
Rule 55    expr -> LCURL fieldlist RCURL
Rule 56    expr -> LCURL field RCURL
Rule 57    param -> ID COLON qualifier type
Rule 58    paramlist -> param COMMA param
Rule 59    paramlist -> param COMMA paramlist
Rule 60    expr -> FUN LPAREN paramlist RPAREN type ARROW expr END
Rule 61    expr -> FUN LPAREN param RPAREN type ARROW expr END
Rule 62    expr -> FUN LPAREN RPAREN type ARROW expr END
Rule 63    exprlist -> expr COMMA expr
Rule 64    exprlist -> expr COMMA exprlist
Rule 65    expr -> ID LPAREN exprlist RPAREN
Rule 66    expr -> ID LPAREN expr RPAREN
Rule 67    expr -> ID LPAREN RPAREN

Terminals, with rules where they appear

A                    : 13
AND                  : 29
ARROW                : 10 11 12 60 61 62
ASSIGN               : 17 18 52
B                    : 14
BOOL                 : 3
BOOL_LITERAL         : 45
BRANCH               : 49 50 51
COLON                : 57
COMMA                : 6 7 47 48 53 54 58 59 63 64
DESTROY              : 23
DIVIDE               : 28
DO                   : 20
DOT                  : 24
ELSE                 : 19
END                  : 19 20 49 50 51 60 61 62
EQ                   : 31
FUN                  : 60 61 62
GT                   : 8 9 32
GTE                  : 33
ID                   : 16 17 17 24 46 47 47 48 50 52 57 65 66 67
IF                   : 19
IN                   : 16 17
INT                  : 2
INT_LITERAL          : 44
LBRAC                : 10 11 12
LCURL                : 55 56
LET                  : 16 17
LPAREN               : 22 23 42 43 49 50 51 60 61 62 65 66 67
LT                   : 8 9 34
LTE                  : 35
MINUS                : 26 38
MOD                  : 37
NEQ                  : 36
NOT                  : 39
OR                   : 30
PLUS                 : 25
PRINT                : 22
RBRAC                : 10 11 12
RCURL                : 55 56
REF                  : 41
RPAREN               : 22 23 42 43 49 50 51 60 61 62 65 66 67
SEMICOLON            : 21
THEN                 : 19
TIMES                : 27 40
U                    : 15
UNIT                 : 4
WHILE                : 20
error                : 

Nonterminals, with rules where they appear

expr                 : 1 16 17 17 18 18 19 19 19 20 20 21 21 22 23 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 39 40 41 42 49 50 51 52 60 61 62 63 63 64 66
exprlist             : 64 65
field                : 53 53 54 56
fieldlist            : 54 55
param                : 9 58 58 59 61
paramlist            : 8 59 60
program              : 0
qualifier            : 52 57
simple_type          : 5
tlist                : 7 10
type                 : 6 6 7 10 11 11 12 57 60 61 62
varlist              : 48 49

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    program                        shift and go to state 1
    expr                           shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    $end            reduce using rule 1 (program -> expr .)
    ASSIGN          shift and go to state 18
    SEMICOLON       shift and go to state 19
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33
    REF             shift and go to state 34


state 3

    (16) expr -> LET . ID IN expr
    (17) expr -> LET . ID ID ASSIGN expr IN expr

    ID              shift and go to state 35


state 4

    (46) expr -> ID .
    (65) expr -> ID . LPAREN exprlist RPAREN
    (66) expr -> ID . LPAREN expr RPAREN
    (67) expr -> ID . LPAREN RPAREN

    ASSIGN          reduce using rule 46 (expr -> ID .)
    SEMICOLON       reduce using rule 46 (expr -> ID .)
    DOT             reduce using rule 46 (expr -> ID .)
    PLUS            reduce using rule 46 (expr -> ID .)
    MINUS           reduce using rule 46 (expr -> ID .)
    TIMES           reduce using rule 46 (expr -> ID .)
    DIVIDE          reduce using rule 46 (expr -> ID .)
    AND             reduce using rule 46 (expr -> ID .)
    OR              reduce using rule 46 (expr -> ID .)
    EQ              reduce using rule 46 (expr -> ID .)
    GT              reduce using rule 46 (expr -> ID .)
    GTE             reduce using rule 46 (expr -> ID .)
    LT              reduce using rule 46 (expr -> ID .)
    LTE             reduce using rule 46 (expr -> ID .)
    NEQ             reduce using rule 46 (expr -> ID .)
    MOD             reduce using rule 46 (expr -> ID .)
    REF             reduce using rule 46 (expr -> ID .)
    $end            reduce using rule 46 (expr -> ID .)
    THEN            reduce using rule 46 (expr -> ID .)
    DO              reduce using rule 46 (expr -> ID .)
    RPAREN          reduce using rule 46 (expr -> ID .)
    COMMA           reduce using rule 46 (expr -> ID .)
    ELSE            reduce using rule 46 (expr -> ID .)
    END             reduce using rule 46 (expr -> ID .)
    IN              reduce using rule 46 (expr -> ID .)
    RCURL           reduce using rule 46 (expr -> ID .)
    LPAREN          shift and go to state 36


state 5

    (19) expr -> IF . expr THEN expr ELSE expr END
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 37

state 6

    (20) expr -> WHILE . expr DO expr END
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 38

state 7

    (22) expr -> PRINT . LPAREN expr RPAREN

    LPAREN          shift and go to state 39


state 8

    (42) expr -> LPAREN . expr RPAREN
    (43) expr -> LPAREN . RPAREN
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    RPAREN          shift and go to state 41
    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 40

state 9

    (23) expr -> DESTROY . LPAREN expr RPAREN

    LPAREN          shift and go to state 42


state 10

    (38) expr -> MINUS . expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 43

state 11

    (40) expr -> TIMES . expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 44

state 12

    (39) expr -> NOT . expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 45

state 13

    (44) expr -> INT_LITERAL .

    ASSIGN          reduce using rule 44 (expr -> INT_LITERAL .)
    SEMICOLON       reduce using rule 44 (expr -> INT_LITERAL .)
    DOT             reduce using rule 44 (expr -> INT_LITERAL .)
    PLUS            reduce using rule 44 (expr -> INT_LITERAL .)
    MINUS           reduce using rule 44 (expr -> INT_LITERAL .)
    TIMES           reduce using rule 44 (expr -> INT_LITERAL .)
    DIVIDE          reduce using rule 44 (expr -> INT_LITERAL .)
    AND             reduce using rule 44 (expr -> INT_LITERAL .)
    OR              reduce using rule 44 (expr -> INT_LITERAL .)
    EQ              reduce using rule 44 (expr -> INT_LITERAL .)
    GT              reduce using rule 44 (expr -> INT_LITERAL .)
    GTE             reduce using rule 44 (expr -> INT_LITERAL .)
    LT              reduce using rule 44 (expr -> INT_LITERAL .)
    LTE             reduce using rule 44 (expr -> INT_LITERAL .)
    NEQ             reduce using rule 44 (expr -> INT_LITERAL .)
    MOD             reduce using rule 44 (expr -> INT_LITERAL .)
    REF             reduce using rule 44 (expr -> INT_LITERAL .)
    $end            reduce using rule 44 (expr -> INT_LITERAL .)
    THEN            reduce using rule 44 (expr -> INT_LITERAL .)
    DO              reduce using rule 44 (expr -> INT_LITERAL .)
    RPAREN          reduce using rule 44 (expr -> INT_LITERAL .)
    COMMA           reduce using rule 44 (expr -> INT_LITERAL .)
    ELSE            reduce using rule 44 (expr -> INT_LITERAL .)
    END             reduce using rule 44 (expr -> INT_LITERAL .)
    IN              reduce using rule 44 (expr -> INT_LITERAL .)
    RCURL           reduce using rule 44 (expr -> INT_LITERAL .)


state 14

    (45) expr -> BOOL_LITERAL .

    ASSIGN          reduce using rule 45 (expr -> BOOL_LITERAL .)
    SEMICOLON       reduce using rule 45 (expr -> BOOL_LITERAL .)
    DOT             reduce using rule 45 (expr -> BOOL_LITERAL .)
    PLUS            reduce using rule 45 (expr -> BOOL_LITERAL .)
    MINUS           reduce using rule 45 (expr -> BOOL_LITERAL .)
    TIMES           reduce using rule 45 (expr -> BOOL_LITERAL .)
    DIVIDE          reduce using rule 45 (expr -> BOOL_LITERAL .)
    AND             reduce using rule 45 (expr -> BOOL_LITERAL .)
    OR              reduce using rule 45 (expr -> BOOL_LITERAL .)
    EQ              reduce using rule 45 (expr -> BOOL_LITERAL .)
    GT              reduce using rule 45 (expr -> BOOL_LITERAL .)
    GTE             reduce using rule 45 (expr -> BOOL_LITERAL .)
    LT              reduce using rule 45 (expr -> BOOL_LITERAL .)
    LTE             reduce using rule 45 (expr -> BOOL_LITERAL .)
    NEQ             reduce using rule 45 (expr -> BOOL_LITERAL .)
    MOD             reduce using rule 45 (expr -> BOOL_LITERAL .)
    REF             reduce using rule 45 (expr -> BOOL_LITERAL .)
    $end            reduce using rule 45 (expr -> BOOL_LITERAL .)
    THEN            reduce using rule 45 (expr -> BOOL_LITERAL .)
    DO              reduce using rule 45 (expr -> BOOL_LITERAL .)
    RPAREN          reduce using rule 45 (expr -> BOOL_LITERAL .)
    COMMA           reduce using rule 45 (expr -> BOOL_LITERAL .)
    ELSE            reduce using rule 45 (expr -> BOOL_LITERAL .)
    END             reduce using rule 45 (expr -> BOOL_LITERAL .)
    IN              reduce using rule 45 (expr -> BOOL_LITERAL .)
    RCURL           reduce using rule 45 (expr -> BOOL_LITERAL .)


state 15

    (49) expr -> BRANCH . LPAREN varlist RPAREN expr END
    (50) expr -> BRANCH . LPAREN ID RPAREN expr END
    (51) expr -> BRANCH . LPAREN RPAREN expr END

    LPAREN          shift and go to state 46


state 16

    (55) expr -> LCURL . fieldlist RCURL
    (56) expr -> LCURL . field RCURL
    (53) fieldlist -> . field COMMA field
    (54) fieldlist -> . field COMMA fieldlist
    (52) field -> . ID ASSIGN qualifier expr

    ID              shift and go to state 49

    fieldlist                      shift and go to state 47
    field                          shift and go to state 48

state 17

    (60) expr -> FUN . LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> FUN . LPAREN param RPAREN type ARROW expr END
    (62) expr -> FUN . LPAREN RPAREN type ARROW expr END

    LPAREN          shift and go to state 50


state 18

    (18) expr -> expr ASSIGN . expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 51

state 19

    (21) expr -> expr SEMICOLON . expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 52

state 20

    (24) expr -> expr DOT . ID

    ID              shift and go to state 53


state 21

    (25) expr -> expr PLUS . expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 54

state 22

    (26) expr -> expr MINUS . expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 55

state 23

    (27) expr -> expr TIMES . expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 56

state 24

    (28) expr -> expr DIVIDE . expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 57

state 25

    (29) expr -> expr AND . expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 58

state 26

    (30) expr -> expr OR . expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 59

state 27

    (31) expr -> expr EQ . expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 60

state 28

    (32) expr -> expr GT . expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 61

state 29

    (33) expr -> expr GTE . expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 62

state 30

    (34) expr -> expr LT . expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 63

state 31

    (35) expr -> expr LTE . expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 64

state 32

    (36) expr -> expr NEQ . expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 65

state 33

    (37) expr -> expr MOD . expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 66

state 34

    (41) expr -> expr REF .

    ASSIGN          reduce using rule 41 (expr -> expr REF .)
    SEMICOLON       reduce using rule 41 (expr -> expr REF .)
    DOT             reduce using rule 41 (expr -> expr REF .)
    PLUS            reduce using rule 41 (expr -> expr REF .)
    MINUS           reduce using rule 41 (expr -> expr REF .)
    TIMES           reduce using rule 41 (expr -> expr REF .)
    DIVIDE          reduce using rule 41 (expr -> expr REF .)
    AND             reduce using rule 41 (expr -> expr REF .)
    OR              reduce using rule 41 (expr -> expr REF .)
    EQ              reduce using rule 41 (expr -> expr REF .)
    GT              reduce using rule 41 (expr -> expr REF .)
    GTE             reduce using rule 41 (expr -> expr REF .)
    LT              reduce using rule 41 (expr -> expr REF .)
    LTE             reduce using rule 41 (expr -> expr REF .)
    NEQ             reduce using rule 41 (expr -> expr REF .)
    MOD             reduce using rule 41 (expr -> expr REF .)
    REF             reduce using rule 41 (expr -> expr REF .)
    $end            reduce using rule 41 (expr -> expr REF .)
    THEN            reduce using rule 41 (expr -> expr REF .)
    DO              reduce using rule 41 (expr -> expr REF .)
    RPAREN          reduce using rule 41 (expr -> expr REF .)
    COMMA           reduce using rule 41 (expr -> expr REF .)
    ELSE            reduce using rule 41 (expr -> expr REF .)
    END             reduce using rule 41 (expr -> expr REF .)
    IN              reduce using rule 41 (expr -> expr REF .)
    RCURL           reduce using rule 41 (expr -> expr REF .)


state 35

    (16) expr -> LET ID . IN expr
    (17) expr -> LET ID . ID ASSIGN expr IN expr

    IN              shift and go to state 68
    ID              shift and go to state 67


state 36

    (65) expr -> ID LPAREN . exprlist RPAREN
    (66) expr -> ID LPAREN . expr RPAREN
    (67) expr -> ID LPAREN . RPAREN
    (63) exprlist -> . expr COMMA expr
    (64) exprlist -> . expr COMMA exprlist
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    RPAREN          shift and go to state 70
    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    exprlist                       shift and go to state 69
    expr                           shift and go to state 71

state 37

    (19) expr -> IF expr . THEN expr ELSE expr END
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    THEN            shift and go to state 72
    ASSIGN          shift and go to state 18
    SEMICOLON       shift and go to state 19
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33
    REF             shift and go to state 34


state 38

    (20) expr -> WHILE expr . DO expr END
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    DO              shift and go to state 73
    ASSIGN          shift and go to state 18
    SEMICOLON       shift and go to state 19
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33
    REF             shift and go to state 34


state 39

    (22) expr -> PRINT LPAREN . expr RPAREN
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 74

state 40

    (42) expr -> LPAREN expr . RPAREN
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    RPAREN          shift and go to state 75
    ASSIGN          shift and go to state 18
    SEMICOLON       shift and go to state 19
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33
    REF             shift and go to state 34


state 41

    (43) expr -> LPAREN RPAREN .

    ASSIGN          reduce using rule 43 (expr -> LPAREN RPAREN .)
    SEMICOLON       reduce using rule 43 (expr -> LPAREN RPAREN .)
    DOT             reduce using rule 43 (expr -> LPAREN RPAREN .)
    PLUS            reduce using rule 43 (expr -> LPAREN RPAREN .)
    MINUS           reduce using rule 43 (expr -> LPAREN RPAREN .)
    TIMES           reduce using rule 43 (expr -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 43 (expr -> LPAREN RPAREN .)
    AND             reduce using rule 43 (expr -> LPAREN RPAREN .)
    OR              reduce using rule 43 (expr -> LPAREN RPAREN .)
    EQ              reduce using rule 43 (expr -> LPAREN RPAREN .)
    GT              reduce using rule 43 (expr -> LPAREN RPAREN .)
    GTE             reduce using rule 43 (expr -> LPAREN RPAREN .)
    LT              reduce using rule 43 (expr -> LPAREN RPAREN .)
    LTE             reduce using rule 43 (expr -> LPAREN RPAREN .)
    NEQ             reduce using rule 43 (expr -> LPAREN RPAREN .)
    MOD             reduce using rule 43 (expr -> LPAREN RPAREN .)
    REF             reduce using rule 43 (expr -> LPAREN RPAREN .)
    $end            reduce using rule 43 (expr -> LPAREN RPAREN .)
    THEN            reduce using rule 43 (expr -> LPAREN RPAREN .)
    DO              reduce using rule 43 (expr -> LPAREN RPAREN .)
    RPAREN          reduce using rule 43 (expr -> LPAREN RPAREN .)
    COMMA           reduce using rule 43 (expr -> LPAREN RPAREN .)
    ELSE            reduce using rule 43 (expr -> LPAREN RPAREN .)
    END             reduce using rule 43 (expr -> LPAREN RPAREN .)
    IN              reduce using rule 43 (expr -> LPAREN RPAREN .)
    RCURL           reduce using rule 43 (expr -> LPAREN RPAREN .)


state 42

    (23) expr -> DESTROY LPAREN . expr RPAREN
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 76

state 43

    (38) expr -> MINUS expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    ASSIGN          reduce using rule 38 (expr -> MINUS expr .)
    SEMICOLON       reduce using rule 38 (expr -> MINUS expr .)
    PLUS            reduce using rule 38 (expr -> MINUS expr .)
    MINUS           reduce using rule 38 (expr -> MINUS expr .)
    TIMES           reduce using rule 38 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 38 (expr -> MINUS expr .)
    AND             reduce using rule 38 (expr -> MINUS expr .)
    OR              reduce using rule 38 (expr -> MINUS expr .)
    EQ              reduce using rule 38 (expr -> MINUS expr .)
    GT              reduce using rule 38 (expr -> MINUS expr .)
    GTE             reduce using rule 38 (expr -> MINUS expr .)
    LT              reduce using rule 38 (expr -> MINUS expr .)
    LTE             reduce using rule 38 (expr -> MINUS expr .)
    NEQ             reduce using rule 38 (expr -> MINUS expr .)
    MOD             reduce using rule 38 (expr -> MINUS expr .)
    REF             reduce using rule 38 (expr -> MINUS expr .)
    $end            reduce using rule 38 (expr -> MINUS expr .)
    THEN            reduce using rule 38 (expr -> MINUS expr .)
    DO              reduce using rule 38 (expr -> MINUS expr .)
    RPAREN          reduce using rule 38 (expr -> MINUS expr .)
    COMMA           reduce using rule 38 (expr -> MINUS expr .)
    ELSE            reduce using rule 38 (expr -> MINUS expr .)
    END             reduce using rule 38 (expr -> MINUS expr .)
    IN              reduce using rule 38 (expr -> MINUS expr .)
    RCURL           reduce using rule 38 (expr -> MINUS expr .)
    DOT             shift and go to state 20

  ! DOT             [ reduce using rule 38 (expr -> MINUS expr .) ]
  ! ASSIGN          [ shift and go to state 18 ]
  ! SEMICOLON       [ shift and go to state 19 ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 22 ]
  ! TIMES           [ shift and go to state 23 ]
  ! DIVIDE          [ shift and go to state 24 ]
  ! AND             [ shift and go to state 25 ]
  ! OR              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! GTE             [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! NEQ             [ shift and go to state 32 ]
  ! MOD             [ shift and go to state 33 ]
  ! REF             [ shift and go to state 34 ]


state 44

    (40) expr -> TIMES expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    ASSIGN          reduce using rule 40 (expr -> TIMES expr .)
    SEMICOLON       reduce using rule 40 (expr -> TIMES expr .)
    PLUS            reduce using rule 40 (expr -> TIMES expr .)
    MINUS           reduce using rule 40 (expr -> TIMES expr .)
    TIMES           reduce using rule 40 (expr -> TIMES expr .)
    DIVIDE          reduce using rule 40 (expr -> TIMES expr .)
    AND             reduce using rule 40 (expr -> TIMES expr .)
    OR              reduce using rule 40 (expr -> TIMES expr .)
    EQ              reduce using rule 40 (expr -> TIMES expr .)
    GT              reduce using rule 40 (expr -> TIMES expr .)
    GTE             reduce using rule 40 (expr -> TIMES expr .)
    LT              reduce using rule 40 (expr -> TIMES expr .)
    LTE             reduce using rule 40 (expr -> TIMES expr .)
    NEQ             reduce using rule 40 (expr -> TIMES expr .)
    MOD             reduce using rule 40 (expr -> TIMES expr .)
    REF             reduce using rule 40 (expr -> TIMES expr .)
    $end            reduce using rule 40 (expr -> TIMES expr .)
    THEN            reduce using rule 40 (expr -> TIMES expr .)
    DO              reduce using rule 40 (expr -> TIMES expr .)
    RPAREN          reduce using rule 40 (expr -> TIMES expr .)
    COMMA           reduce using rule 40 (expr -> TIMES expr .)
    ELSE            reduce using rule 40 (expr -> TIMES expr .)
    END             reduce using rule 40 (expr -> TIMES expr .)
    IN              reduce using rule 40 (expr -> TIMES expr .)
    RCURL           reduce using rule 40 (expr -> TIMES expr .)
    DOT             shift and go to state 20

  ! DOT             [ reduce using rule 40 (expr -> TIMES expr .) ]
  ! ASSIGN          [ shift and go to state 18 ]
  ! SEMICOLON       [ shift and go to state 19 ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 22 ]
  ! TIMES           [ shift and go to state 23 ]
  ! DIVIDE          [ shift and go to state 24 ]
  ! AND             [ shift and go to state 25 ]
  ! OR              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! GTE             [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! NEQ             [ shift and go to state 32 ]
  ! MOD             [ shift and go to state 33 ]
  ! REF             [ shift and go to state 34 ]


state 45

    (39) expr -> NOT expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    ASSIGN          reduce using rule 39 (expr -> NOT expr .)
    SEMICOLON       reduce using rule 39 (expr -> NOT expr .)
    PLUS            reduce using rule 39 (expr -> NOT expr .)
    MINUS           reduce using rule 39 (expr -> NOT expr .)
    TIMES           reduce using rule 39 (expr -> NOT expr .)
    DIVIDE          reduce using rule 39 (expr -> NOT expr .)
    AND             reduce using rule 39 (expr -> NOT expr .)
    OR              reduce using rule 39 (expr -> NOT expr .)
    EQ              reduce using rule 39 (expr -> NOT expr .)
    GT              reduce using rule 39 (expr -> NOT expr .)
    GTE             reduce using rule 39 (expr -> NOT expr .)
    LT              reduce using rule 39 (expr -> NOT expr .)
    LTE             reduce using rule 39 (expr -> NOT expr .)
    NEQ             reduce using rule 39 (expr -> NOT expr .)
    MOD             reduce using rule 39 (expr -> NOT expr .)
    REF             reduce using rule 39 (expr -> NOT expr .)
    $end            reduce using rule 39 (expr -> NOT expr .)
    THEN            reduce using rule 39 (expr -> NOT expr .)
    DO              reduce using rule 39 (expr -> NOT expr .)
    RPAREN          reduce using rule 39 (expr -> NOT expr .)
    COMMA           reduce using rule 39 (expr -> NOT expr .)
    ELSE            reduce using rule 39 (expr -> NOT expr .)
    END             reduce using rule 39 (expr -> NOT expr .)
    IN              reduce using rule 39 (expr -> NOT expr .)
    RCURL           reduce using rule 39 (expr -> NOT expr .)
    DOT             shift and go to state 20

  ! DOT             [ reduce using rule 39 (expr -> NOT expr .) ]
  ! ASSIGN          [ shift and go to state 18 ]
  ! SEMICOLON       [ shift and go to state 19 ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 22 ]
  ! TIMES           [ shift and go to state 23 ]
  ! DIVIDE          [ shift and go to state 24 ]
  ! AND             [ shift and go to state 25 ]
  ! OR              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! GTE             [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! NEQ             [ shift and go to state 32 ]
  ! MOD             [ shift and go to state 33 ]
  ! REF             [ shift and go to state 34 ]


state 46

    (49) expr -> BRANCH LPAREN . varlist RPAREN expr END
    (50) expr -> BRANCH LPAREN . ID RPAREN expr END
    (51) expr -> BRANCH LPAREN . RPAREN expr END
    (47) varlist -> . ID COMMA ID
    (48) varlist -> . ID COMMA varlist

    ID              shift and go to state 79
    RPAREN          shift and go to state 78

    varlist                        shift and go to state 77

state 47

    (55) expr -> LCURL fieldlist . RCURL

    RCURL           shift and go to state 80


state 48

    (56) expr -> LCURL field . RCURL
    (53) fieldlist -> field . COMMA field
    (54) fieldlist -> field . COMMA fieldlist

    RCURL           shift and go to state 81
    COMMA           shift and go to state 82


state 49

    (52) field -> ID . ASSIGN qualifier expr

    ASSIGN          shift and go to state 83


state 50

    (60) expr -> FUN LPAREN . paramlist RPAREN type ARROW expr END
    (61) expr -> FUN LPAREN . param RPAREN type ARROW expr END
    (62) expr -> FUN LPAREN . RPAREN type ARROW expr END
    (58) paramlist -> . param COMMA param
    (59) paramlist -> . param COMMA paramlist
    (57) param -> . ID COLON qualifier type

    RPAREN          shift and go to state 85
    ID              shift and go to state 87

    paramlist                      shift and go to state 84
    param                          shift and go to state 86

state 51

    (18) expr -> expr ASSIGN expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    ASSIGN          reduce using rule 18 (expr -> expr ASSIGN expr .)
    SEMICOLON       reduce using rule 18 (expr -> expr ASSIGN expr .)
    REF             reduce using rule 18 (expr -> expr ASSIGN expr .)
    $end            reduce using rule 18 (expr -> expr ASSIGN expr .)
    THEN            reduce using rule 18 (expr -> expr ASSIGN expr .)
    DO              reduce using rule 18 (expr -> expr ASSIGN expr .)
    RPAREN          reduce using rule 18 (expr -> expr ASSIGN expr .)
    COMMA           reduce using rule 18 (expr -> expr ASSIGN expr .)
    ELSE            reduce using rule 18 (expr -> expr ASSIGN expr .)
    END             reduce using rule 18 (expr -> expr ASSIGN expr .)
    IN              reduce using rule 18 (expr -> expr ASSIGN expr .)
    RCURL           reduce using rule 18 (expr -> expr ASSIGN expr .)
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33

  ! DOT             [ reduce using rule 18 (expr -> expr ASSIGN expr .) ]
  ! PLUS            [ reduce using rule 18 (expr -> expr ASSIGN expr .) ]
  ! MINUS           [ reduce using rule 18 (expr -> expr ASSIGN expr .) ]
  ! TIMES           [ reduce using rule 18 (expr -> expr ASSIGN expr .) ]
  ! DIVIDE          [ reduce using rule 18 (expr -> expr ASSIGN expr .) ]
  ! AND             [ reduce using rule 18 (expr -> expr ASSIGN expr .) ]
  ! OR              [ reduce using rule 18 (expr -> expr ASSIGN expr .) ]
  ! EQ              [ reduce using rule 18 (expr -> expr ASSIGN expr .) ]
  ! GT              [ reduce using rule 18 (expr -> expr ASSIGN expr .) ]
  ! GTE             [ reduce using rule 18 (expr -> expr ASSIGN expr .) ]
  ! LT              [ reduce using rule 18 (expr -> expr ASSIGN expr .) ]
  ! LTE             [ reduce using rule 18 (expr -> expr ASSIGN expr .) ]
  ! NEQ             [ reduce using rule 18 (expr -> expr ASSIGN expr .) ]
  ! MOD             [ reduce using rule 18 (expr -> expr ASSIGN expr .) ]
  ! ASSIGN          [ shift and go to state 18 ]
  ! SEMICOLON       [ shift and go to state 19 ]
  ! REF             [ shift and go to state 34 ]


state 52

    (21) expr -> expr SEMICOLON expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    ASSIGN          reduce using rule 21 (expr -> expr SEMICOLON expr .)
    SEMICOLON       reduce using rule 21 (expr -> expr SEMICOLON expr .)
    REF             reduce using rule 21 (expr -> expr SEMICOLON expr .)
    $end            reduce using rule 21 (expr -> expr SEMICOLON expr .)
    THEN            reduce using rule 21 (expr -> expr SEMICOLON expr .)
    DO              reduce using rule 21 (expr -> expr SEMICOLON expr .)
    RPAREN          reduce using rule 21 (expr -> expr SEMICOLON expr .)
    COMMA           reduce using rule 21 (expr -> expr SEMICOLON expr .)
    ELSE            reduce using rule 21 (expr -> expr SEMICOLON expr .)
    END             reduce using rule 21 (expr -> expr SEMICOLON expr .)
    IN              reduce using rule 21 (expr -> expr SEMICOLON expr .)
    RCURL           reduce using rule 21 (expr -> expr SEMICOLON expr .)
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33

  ! DOT             [ reduce using rule 21 (expr -> expr SEMICOLON expr .) ]
  ! PLUS            [ reduce using rule 21 (expr -> expr SEMICOLON expr .) ]
  ! MINUS           [ reduce using rule 21 (expr -> expr SEMICOLON expr .) ]
  ! TIMES           [ reduce using rule 21 (expr -> expr SEMICOLON expr .) ]
  ! DIVIDE          [ reduce using rule 21 (expr -> expr SEMICOLON expr .) ]
  ! AND             [ reduce using rule 21 (expr -> expr SEMICOLON expr .) ]
  ! OR              [ reduce using rule 21 (expr -> expr SEMICOLON expr .) ]
  ! EQ              [ reduce using rule 21 (expr -> expr SEMICOLON expr .) ]
  ! GT              [ reduce using rule 21 (expr -> expr SEMICOLON expr .) ]
  ! GTE             [ reduce using rule 21 (expr -> expr SEMICOLON expr .) ]
  ! LT              [ reduce using rule 21 (expr -> expr SEMICOLON expr .) ]
  ! LTE             [ reduce using rule 21 (expr -> expr SEMICOLON expr .) ]
  ! NEQ             [ reduce using rule 21 (expr -> expr SEMICOLON expr .) ]
  ! MOD             [ reduce using rule 21 (expr -> expr SEMICOLON expr .) ]
  ! ASSIGN          [ shift and go to state 18 ]
  ! SEMICOLON       [ shift and go to state 19 ]
  ! REF             [ shift and go to state 34 ]


state 53

    (24) expr -> expr DOT ID .

    ASSIGN          reduce using rule 24 (expr -> expr DOT ID .)
    SEMICOLON       reduce using rule 24 (expr -> expr DOT ID .)
    DOT             reduce using rule 24 (expr -> expr DOT ID .)
    PLUS            reduce using rule 24 (expr -> expr DOT ID .)
    MINUS           reduce using rule 24 (expr -> expr DOT ID .)
    TIMES           reduce using rule 24 (expr -> expr DOT ID .)
    DIVIDE          reduce using rule 24 (expr -> expr DOT ID .)
    AND             reduce using rule 24 (expr -> expr DOT ID .)
    OR              reduce using rule 24 (expr -> expr DOT ID .)
    EQ              reduce using rule 24 (expr -> expr DOT ID .)
    GT              reduce using rule 24 (expr -> expr DOT ID .)
    GTE             reduce using rule 24 (expr -> expr DOT ID .)
    LT              reduce using rule 24 (expr -> expr DOT ID .)
    LTE             reduce using rule 24 (expr -> expr DOT ID .)
    NEQ             reduce using rule 24 (expr -> expr DOT ID .)
    MOD             reduce using rule 24 (expr -> expr DOT ID .)
    REF             reduce using rule 24 (expr -> expr DOT ID .)
    $end            reduce using rule 24 (expr -> expr DOT ID .)
    THEN            reduce using rule 24 (expr -> expr DOT ID .)
    DO              reduce using rule 24 (expr -> expr DOT ID .)
    RPAREN          reduce using rule 24 (expr -> expr DOT ID .)
    COMMA           reduce using rule 24 (expr -> expr DOT ID .)
    ELSE            reduce using rule 24 (expr -> expr DOT ID .)
    END             reduce using rule 24 (expr -> expr DOT ID .)
    IN              reduce using rule 24 (expr -> expr DOT ID .)
    RCURL           reduce using rule 24 (expr -> expr DOT ID .)


state 54

    (25) expr -> expr PLUS expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    ASSIGN          reduce using rule 25 (expr -> expr PLUS expr .)
    SEMICOLON       reduce using rule 25 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 25 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 25 (expr -> expr PLUS expr .)
    AND             reduce using rule 25 (expr -> expr PLUS expr .)
    OR              reduce using rule 25 (expr -> expr PLUS expr .)
    EQ              reduce using rule 25 (expr -> expr PLUS expr .)
    GT              reduce using rule 25 (expr -> expr PLUS expr .)
    GTE             reduce using rule 25 (expr -> expr PLUS expr .)
    LT              reduce using rule 25 (expr -> expr PLUS expr .)
    LTE             reduce using rule 25 (expr -> expr PLUS expr .)
    NEQ             reduce using rule 25 (expr -> expr PLUS expr .)
    REF             reduce using rule 25 (expr -> expr PLUS expr .)
    $end            reduce using rule 25 (expr -> expr PLUS expr .)
    THEN            reduce using rule 25 (expr -> expr PLUS expr .)
    DO              reduce using rule 25 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 25 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 25 (expr -> expr PLUS expr .)
    ELSE            reduce using rule 25 (expr -> expr PLUS expr .)
    END             reduce using rule 25 (expr -> expr PLUS expr .)
    IN              reduce using rule 25 (expr -> expr PLUS expr .)
    RCURL           reduce using rule 25 (expr -> expr PLUS expr .)
    DOT             shift and go to state 20
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    MOD             shift and go to state 33

  ! DOT             [ reduce using rule 25 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 25 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 25 (expr -> expr PLUS expr .) ]
  ! MOD             [ reduce using rule 25 (expr -> expr PLUS expr .) ]
  ! ASSIGN          [ shift and go to state 18 ]
  ! SEMICOLON       [ shift and go to state 19 ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 22 ]
  ! AND             [ shift and go to state 25 ]
  ! OR              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! GTE             [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! NEQ             [ shift and go to state 32 ]
  ! REF             [ shift and go to state 34 ]


state 55

    (26) expr -> expr MINUS expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    ASSIGN          reduce using rule 26 (expr -> expr MINUS expr .)
    SEMICOLON       reduce using rule 26 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 26 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 26 (expr -> expr MINUS expr .)
    AND             reduce using rule 26 (expr -> expr MINUS expr .)
    OR              reduce using rule 26 (expr -> expr MINUS expr .)
    EQ              reduce using rule 26 (expr -> expr MINUS expr .)
    GT              reduce using rule 26 (expr -> expr MINUS expr .)
    GTE             reduce using rule 26 (expr -> expr MINUS expr .)
    LT              reduce using rule 26 (expr -> expr MINUS expr .)
    LTE             reduce using rule 26 (expr -> expr MINUS expr .)
    NEQ             reduce using rule 26 (expr -> expr MINUS expr .)
    REF             reduce using rule 26 (expr -> expr MINUS expr .)
    $end            reduce using rule 26 (expr -> expr MINUS expr .)
    THEN            reduce using rule 26 (expr -> expr MINUS expr .)
    DO              reduce using rule 26 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 26 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 26 (expr -> expr MINUS expr .)
    ELSE            reduce using rule 26 (expr -> expr MINUS expr .)
    END             reduce using rule 26 (expr -> expr MINUS expr .)
    IN              reduce using rule 26 (expr -> expr MINUS expr .)
    RCURL           reduce using rule 26 (expr -> expr MINUS expr .)
    DOT             shift and go to state 20
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    MOD             shift and go to state 33

  ! DOT             [ reduce using rule 26 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 26 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 26 (expr -> expr MINUS expr .) ]
  ! MOD             [ reduce using rule 26 (expr -> expr MINUS expr .) ]
  ! ASSIGN          [ shift and go to state 18 ]
  ! SEMICOLON       [ shift and go to state 19 ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 22 ]
  ! AND             [ shift and go to state 25 ]
  ! OR              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! GTE             [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! NEQ             [ shift and go to state 32 ]
  ! REF             [ shift and go to state 34 ]


state 56

    (27) expr -> expr TIMES expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    ASSIGN          reduce using rule 27 (expr -> expr TIMES expr .)
    SEMICOLON       reduce using rule 27 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 27 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 27 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 27 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 27 (expr -> expr TIMES expr .)
    AND             reduce using rule 27 (expr -> expr TIMES expr .)
    OR              reduce using rule 27 (expr -> expr TIMES expr .)
    EQ              reduce using rule 27 (expr -> expr TIMES expr .)
    GT              reduce using rule 27 (expr -> expr TIMES expr .)
    GTE             reduce using rule 27 (expr -> expr TIMES expr .)
    LT              reduce using rule 27 (expr -> expr TIMES expr .)
    LTE             reduce using rule 27 (expr -> expr TIMES expr .)
    NEQ             reduce using rule 27 (expr -> expr TIMES expr .)
    MOD             reduce using rule 27 (expr -> expr TIMES expr .)
    REF             reduce using rule 27 (expr -> expr TIMES expr .)
    $end            reduce using rule 27 (expr -> expr TIMES expr .)
    THEN            reduce using rule 27 (expr -> expr TIMES expr .)
    DO              reduce using rule 27 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 27 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 27 (expr -> expr TIMES expr .)
    ELSE            reduce using rule 27 (expr -> expr TIMES expr .)
    END             reduce using rule 27 (expr -> expr TIMES expr .)
    IN              reduce using rule 27 (expr -> expr TIMES expr .)
    RCURL           reduce using rule 27 (expr -> expr TIMES expr .)
    DOT             shift and go to state 20

  ! DOT             [ reduce using rule 27 (expr -> expr TIMES expr .) ]
  ! ASSIGN          [ shift and go to state 18 ]
  ! SEMICOLON       [ shift and go to state 19 ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 22 ]
  ! TIMES           [ shift and go to state 23 ]
  ! DIVIDE          [ shift and go to state 24 ]
  ! AND             [ shift and go to state 25 ]
  ! OR              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! GTE             [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! NEQ             [ shift and go to state 32 ]
  ! MOD             [ shift and go to state 33 ]
  ! REF             [ shift and go to state 34 ]


state 57

    (28) expr -> expr DIVIDE expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    ASSIGN          reduce using rule 28 (expr -> expr DIVIDE expr .)
    SEMICOLON       reduce using rule 28 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 28 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 28 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 28 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 28 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 28 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 28 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 28 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 28 (expr -> expr DIVIDE expr .)
    GTE             reduce using rule 28 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 28 (expr -> expr DIVIDE expr .)
    LTE             reduce using rule 28 (expr -> expr DIVIDE expr .)
    NEQ             reduce using rule 28 (expr -> expr DIVIDE expr .)
    MOD             reduce using rule 28 (expr -> expr DIVIDE expr .)
    REF             reduce using rule 28 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 28 (expr -> expr DIVIDE expr .)
    THEN            reduce using rule 28 (expr -> expr DIVIDE expr .)
    DO              reduce using rule 28 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 28 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 28 (expr -> expr DIVIDE expr .)
    ELSE            reduce using rule 28 (expr -> expr DIVIDE expr .)
    END             reduce using rule 28 (expr -> expr DIVIDE expr .)
    IN              reduce using rule 28 (expr -> expr DIVIDE expr .)
    RCURL           reduce using rule 28 (expr -> expr DIVIDE expr .)
    DOT             shift and go to state 20

  ! DOT             [ reduce using rule 28 (expr -> expr DIVIDE expr .) ]
  ! ASSIGN          [ shift and go to state 18 ]
  ! SEMICOLON       [ shift and go to state 19 ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 22 ]
  ! TIMES           [ shift and go to state 23 ]
  ! DIVIDE          [ shift and go to state 24 ]
  ! AND             [ shift and go to state 25 ]
  ! OR              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! GTE             [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! NEQ             [ shift and go to state 32 ]
  ! MOD             [ shift and go to state 33 ]
  ! REF             [ shift and go to state 34 ]


state 58

    (29) expr -> expr AND expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    ASSIGN          reduce using rule 29 (expr -> expr AND expr .)
    SEMICOLON       reduce using rule 29 (expr -> expr AND expr .)
    AND             reduce using rule 29 (expr -> expr AND expr .)
    OR              reduce using rule 29 (expr -> expr AND expr .)
    REF             reduce using rule 29 (expr -> expr AND expr .)
    $end            reduce using rule 29 (expr -> expr AND expr .)
    THEN            reduce using rule 29 (expr -> expr AND expr .)
    DO              reduce using rule 29 (expr -> expr AND expr .)
    RPAREN          reduce using rule 29 (expr -> expr AND expr .)
    COMMA           reduce using rule 29 (expr -> expr AND expr .)
    ELSE            reduce using rule 29 (expr -> expr AND expr .)
    END             reduce using rule 29 (expr -> expr AND expr .)
    IN              reduce using rule 29 (expr -> expr AND expr .)
    RCURL           reduce using rule 29 (expr -> expr AND expr .)
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33

  ! DOT             [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! EQ              [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! GTE             [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! LT              [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! LTE             [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! NEQ             [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! MOD             [ reduce using rule 29 (expr -> expr AND expr .) ]
  ! ASSIGN          [ shift and go to state 18 ]
  ! SEMICOLON       [ shift and go to state 19 ]
  ! AND             [ shift and go to state 25 ]
  ! OR              [ shift and go to state 26 ]
  ! REF             [ shift and go to state 34 ]


state 59

    (30) expr -> expr OR expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    ASSIGN          reduce using rule 30 (expr -> expr OR expr .)
    SEMICOLON       reduce using rule 30 (expr -> expr OR expr .)
    OR              reduce using rule 30 (expr -> expr OR expr .)
    REF             reduce using rule 30 (expr -> expr OR expr .)
    $end            reduce using rule 30 (expr -> expr OR expr .)
    THEN            reduce using rule 30 (expr -> expr OR expr .)
    DO              reduce using rule 30 (expr -> expr OR expr .)
    RPAREN          reduce using rule 30 (expr -> expr OR expr .)
    COMMA           reduce using rule 30 (expr -> expr OR expr .)
    ELSE            reduce using rule 30 (expr -> expr OR expr .)
    END             reduce using rule 30 (expr -> expr OR expr .)
    IN              reduce using rule 30 (expr -> expr OR expr .)
    RCURL           reduce using rule 30 (expr -> expr OR expr .)
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    AND             shift and go to state 25
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33

  ! DOT             [ reduce using rule 30 (expr -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 30 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 30 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 30 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 30 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 30 (expr -> expr OR expr .) ]
  ! EQ              [ reduce using rule 30 (expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 30 (expr -> expr OR expr .) ]
  ! GTE             [ reduce using rule 30 (expr -> expr OR expr .) ]
  ! LT              [ reduce using rule 30 (expr -> expr OR expr .) ]
  ! LTE             [ reduce using rule 30 (expr -> expr OR expr .) ]
  ! NEQ             [ reduce using rule 30 (expr -> expr OR expr .) ]
  ! MOD             [ reduce using rule 30 (expr -> expr OR expr .) ]
  ! ASSIGN          [ shift and go to state 18 ]
  ! SEMICOLON       [ shift and go to state 19 ]
  ! OR              [ shift and go to state 26 ]
  ! REF             [ shift and go to state 34 ]


state 60

    (31) expr -> expr EQ expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    ASSIGN          reduce using rule 31 (expr -> expr EQ expr .)
    SEMICOLON       reduce using rule 31 (expr -> expr EQ expr .)
    AND             reduce using rule 31 (expr -> expr EQ expr .)
    OR              reduce using rule 31 (expr -> expr EQ expr .)
    EQ              reduce using rule 31 (expr -> expr EQ expr .)
    NEQ             reduce using rule 31 (expr -> expr EQ expr .)
    REF             reduce using rule 31 (expr -> expr EQ expr .)
    $end            reduce using rule 31 (expr -> expr EQ expr .)
    THEN            reduce using rule 31 (expr -> expr EQ expr .)
    DO              reduce using rule 31 (expr -> expr EQ expr .)
    RPAREN          reduce using rule 31 (expr -> expr EQ expr .)
    COMMA           reduce using rule 31 (expr -> expr EQ expr .)
    ELSE            reduce using rule 31 (expr -> expr EQ expr .)
    END             reduce using rule 31 (expr -> expr EQ expr .)
    IN              reduce using rule 31 (expr -> expr EQ expr .)
    RCURL           reduce using rule 31 (expr -> expr EQ expr .)
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    MOD             shift and go to state 33

  ! DOT             [ reduce using rule 31 (expr -> expr EQ expr .) ]
  ! PLUS            [ reduce using rule 31 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 31 (expr -> expr EQ expr .) ]
  ! TIMES           [ reduce using rule 31 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 31 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 31 (expr -> expr EQ expr .) ]
  ! GTE             [ reduce using rule 31 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 31 (expr -> expr EQ expr .) ]
  ! LTE             [ reduce using rule 31 (expr -> expr EQ expr .) ]
  ! MOD             [ reduce using rule 31 (expr -> expr EQ expr .) ]
  ! ASSIGN          [ shift and go to state 18 ]
  ! SEMICOLON       [ shift and go to state 19 ]
  ! AND             [ shift and go to state 25 ]
  ! OR              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! NEQ             [ shift and go to state 32 ]
  ! REF             [ shift and go to state 34 ]


state 61

    (32) expr -> expr GT expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    ASSIGN          reduce using rule 32 (expr -> expr GT expr .)
    SEMICOLON       reduce using rule 32 (expr -> expr GT expr .)
    AND             reduce using rule 32 (expr -> expr GT expr .)
    OR              reduce using rule 32 (expr -> expr GT expr .)
    EQ              reduce using rule 32 (expr -> expr GT expr .)
    GT              reduce using rule 32 (expr -> expr GT expr .)
    GTE             reduce using rule 32 (expr -> expr GT expr .)
    LT              reduce using rule 32 (expr -> expr GT expr .)
    LTE             reduce using rule 32 (expr -> expr GT expr .)
    NEQ             reduce using rule 32 (expr -> expr GT expr .)
    REF             reduce using rule 32 (expr -> expr GT expr .)
    $end            reduce using rule 32 (expr -> expr GT expr .)
    THEN            reduce using rule 32 (expr -> expr GT expr .)
    DO              reduce using rule 32 (expr -> expr GT expr .)
    RPAREN          reduce using rule 32 (expr -> expr GT expr .)
    COMMA           reduce using rule 32 (expr -> expr GT expr .)
    ELSE            reduce using rule 32 (expr -> expr GT expr .)
    END             reduce using rule 32 (expr -> expr GT expr .)
    IN              reduce using rule 32 (expr -> expr GT expr .)
    RCURL           reduce using rule 32 (expr -> expr GT expr .)
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    MOD             shift and go to state 33

  ! DOT             [ reduce using rule 32 (expr -> expr GT expr .) ]
  ! PLUS            [ reduce using rule 32 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 32 (expr -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 32 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 32 (expr -> expr GT expr .) ]
  ! MOD             [ reduce using rule 32 (expr -> expr GT expr .) ]
  ! ASSIGN          [ shift and go to state 18 ]
  ! SEMICOLON       [ shift and go to state 19 ]
  ! AND             [ shift and go to state 25 ]
  ! OR              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! GTE             [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! NEQ             [ shift and go to state 32 ]
  ! REF             [ shift and go to state 34 ]


state 62

    (33) expr -> expr GTE expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    ASSIGN          reduce using rule 33 (expr -> expr GTE expr .)
    SEMICOLON       reduce using rule 33 (expr -> expr GTE expr .)
    AND             reduce using rule 33 (expr -> expr GTE expr .)
    OR              reduce using rule 33 (expr -> expr GTE expr .)
    EQ              reduce using rule 33 (expr -> expr GTE expr .)
    GT              reduce using rule 33 (expr -> expr GTE expr .)
    GTE             reduce using rule 33 (expr -> expr GTE expr .)
    LT              reduce using rule 33 (expr -> expr GTE expr .)
    LTE             reduce using rule 33 (expr -> expr GTE expr .)
    NEQ             reduce using rule 33 (expr -> expr GTE expr .)
    REF             reduce using rule 33 (expr -> expr GTE expr .)
    $end            reduce using rule 33 (expr -> expr GTE expr .)
    THEN            reduce using rule 33 (expr -> expr GTE expr .)
    DO              reduce using rule 33 (expr -> expr GTE expr .)
    RPAREN          reduce using rule 33 (expr -> expr GTE expr .)
    COMMA           reduce using rule 33 (expr -> expr GTE expr .)
    ELSE            reduce using rule 33 (expr -> expr GTE expr .)
    END             reduce using rule 33 (expr -> expr GTE expr .)
    IN              reduce using rule 33 (expr -> expr GTE expr .)
    RCURL           reduce using rule 33 (expr -> expr GTE expr .)
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    MOD             shift and go to state 33

  ! DOT             [ reduce using rule 33 (expr -> expr GTE expr .) ]
  ! PLUS            [ reduce using rule 33 (expr -> expr GTE expr .) ]
  ! MINUS           [ reduce using rule 33 (expr -> expr GTE expr .) ]
  ! TIMES           [ reduce using rule 33 (expr -> expr GTE expr .) ]
  ! DIVIDE          [ reduce using rule 33 (expr -> expr GTE expr .) ]
  ! MOD             [ reduce using rule 33 (expr -> expr GTE expr .) ]
  ! ASSIGN          [ shift and go to state 18 ]
  ! SEMICOLON       [ shift and go to state 19 ]
  ! AND             [ shift and go to state 25 ]
  ! OR              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! GTE             [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! NEQ             [ shift and go to state 32 ]
  ! REF             [ shift and go to state 34 ]


state 63

    (34) expr -> expr LT expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    ASSIGN          reduce using rule 34 (expr -> expr LT expr .)
    SEMICOLON       reduce using rule 34 (expr -> expr LT expr .)
    AND             reduce using rule 34 (expr -> expr LT expr .)
    OR              reduce using rule 34 (expr -> expr LT expr .)
    EQ              reduce using rule 34 (expr -> expr LT expr .)
    GT              reduce using rule 34 (expr -> expr LT expr .)
    GTE             reduce using rule 34 (expr -> expr LT expr .)
    LT              reduce using rule 34 (expr -> expr LT expr .)
    LTE             reduce using rule 34 (expr -> expr LT expr .)
    NEQ             reduce using rule 34 (expr -> expr LT expr .)
    REF             reduce using rule 34 (expr -> expr LT expr .)
    $end            reduce using rule 34 (expr -> expr LT expr .)
    THEN            reduce using rule 34 (expr -> expr LT expr .)
    DO              reduce using rule 34 (expr -> expr LT expr .)
    RPAREN          reduce using rule 34 (expr -> expr LT expr .)
    COMMA           reduce using rule 34 (expr -> expr LT expr .)
    ELSE            reduce using rule 34 (expr -> expr LT expr .)
    END             reduce using rule 34 (expr -> expr LT expr .)
    IN              reduce using rule 34 (expr -> expr LT expr .)
    RCURL           reduce using rule 34 (expr -> expr LT expr .)
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    MOD             shift and go to state 33

  ! DOT             [ reduce using rule 34 (expr -> expr LT expr .) ]
  ! PLUS            [ reduce using rule 34 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 34 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 34 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 34 (expr -> expr LT expr .) ]
  ! MOD             [ reduce using rule 34 (expr -> expr LT expr .) ]
  ! ASSIGN          [ shift and go to state 18 ]
  ! SEMICOLON       [ shift and go to state 19 ]
  ! AND             [ shift and go to state 25 ]
  ! OR              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! GTE             [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! NEQ             [ shift and go to state 32 ]
  ! REF             [ shift and go to state 34 ]


state 64

    (35) expr -> expr LTE expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    ASSIGN          reduce using rule 35 (expr -> expr LTE expr .)
    SEMICOLON       reduce using rule 35 (expr -> expr LTE expr .)
    AND             reduce using rule 35 (expr -> expr LTE expr .)
    OR              reduce using rule 35 (expr -> expr LTE expr .)
    EQ              reduce using rule 35 (expr -> expr LTE expr .)
    GT              reduce using rule 35 (expr -> expr LTE expr .)
    GTE             reduce using rule 35 (expr -> expr LTE expr .)
    LT              reduce using rule 35 (expr -> expr LTE expr .)
    LTE             reduce using rule 35 (expr -> expr LTE expr .)
    NEQ             reduce using rule 35 (expr -> expr LTE expr .)
    REF             reduce using rule 35 (expr -> expr LTE expr .)
    $end            reduce using rule 35 (expr -> expr LTE expr .)
    THEN            reduce using rule 35 (expr -> expr LTE expr .)
    DO              reduce using rule 35 (expr -> expr LTE expr .)
    RPAREN          reduce using rule 35 (expr -> expr LTE expr .)
    COMMA           reduce using rule 35 (expr -> expr LTE expr .)
    ELSE            reduce using rule 35 (expr -> expr LTE expr .)
    END             reduce using rule 35 (expr -> expr LTE expr .)
    IN              reduce using rule 35 (expr -> expr LTE expr .)
    RCURL           reduce using rule 35 (expr -> expr LTE expr .)
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    MOD             shift and go to state 33

  ! DOT             [ reduce using rule 35 (expr -> expr LTE expr .) ]
  ! PLUS            [ reduce using rule 35 (expr -> expr LTE expr .) ]
  ! MINUS           [ reduce using rule 35 (expr -> expr LTE expr .) ]
  ! TIMES           [ reduce using rule 35 (expr -> expr LTE expr .) ]
  ! DIVIDE          [ reduce using rule 35 (expr -> expr LTE expr .) ]
  ! MOD             [ reduce using rule 35 (expr -> expr LTE expr .) ]
  ! ASSIGN          [ shift and go to state 18 ]
  ! SEMICOLON       [ shift and go to state 19 ]
  ! AND             [ shift and go to state 25 ]
  ! OR              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! GTE             [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! NEQ             [ shift and go to state 32 ]
  ! REF             [ shift and go to state 34 ]


state 65

    (36) expr -> expr NEQ expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    ASSIGN          reduce using rule 36 (expr -> expr NEQ expr .)
    SEMICOLON       reduce using rule 36 (expr -> expr NEQ expr .)
    AND             reduce using rule 36 (expr -> expr NEQ expr .)
    OR              reduce using rule 36 (expr -> expr NEQ expr .)
    EQ              reduce using rule 36 (expr -> expr NEQ expr .)
    NEQ             reduce using rule 36 (expr -> expr NEQ expr .)
    REF             reduce using rule 36 (expr -> expr NEQ expr .)
    $end            reduce using rule 36 (expr -> expr NEQ expr .)
    THEN            reduce using rule 36 (expr -> expr NEQ expr .)
    DO              reduce using rule 36 (expr -> expr NEQ expr .)
    RPAREN          reduce using rule 36 (expr -> expr NEQ expr .)
    COMMA           reduce using rule 36 (expr -> expr NEQ expr .)
    ELSE            reduce using rule 36 (expr -> expr NEQ expr .)
    END             reduce using rule 36 (expr -> expr NEQ expr .)
    IN              reduce using rule 36 (expr -> expr NEQ expr .)
    RCURL           reduce using rule 36 (expr -> expr NEQ expr .)
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    MOD             shift and go to state 33

  ! DOT             [ reduce using rule 36 (expr -> expr NEQ expr .) ]
  ! PLUS            [ reduce using rule 36 (expr -> expr NEQ expr .) ]
  ! MINUS           [ reduce using rule 36 (expr -> expr NEQ expr .) ]
  ! TIMES           [ reduce using rule 36 (expr -> expr NEQ expr .) ]
  ! DIVIDE          [ reduce using rule 36 (expr -> expr NEQ expr .) ]
  ! GT              [ reduce using rule 36 (expr -> expr NEQ expr .) ]
  ! GTE             [ reduce using rule 36 (expr -> expr NEQ expr .) ]
  ! LT              [ reduce using rule 36 (expr -> expr NEQ expr .) ]
  ! LTE             [ reduce using rule 36 (expr -> expr NEQ expr .) ]
  ! MOD             [ reduce using rule 36 (expr -> expr NEQ expr .) ]
  ! ASSIGN          [ shift and go to state 18 ]
  ! SEMICOLON       [ shift and go to state 19 ]
  ! AND             [ shift and go to state 25 ]
  ! OR              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! NEQ             [ shift and go to state 32 ]
  ! REF             [ shift and go to state 34 ]


state 66

    (37) expr -> expr MOD expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    ASSIGN          reduce using rule 37 (expr -> expr MOD expr .)
    SEMICOLON       reduce using rule 37 (expr -> expr MOD expr .)
    PLUS            reduce using rule 37 (expr -> expr MOD expr .)
    MINUS           reduce using rule 37 (expr -> expr MOD expr .)
    TIMES           reduce using rule 37 (expr -> expr MOD expr .)
    DIVIDE          reduce using rule 37 (expr -> expr MOD expr .)
    AND             reduce using rule 37 (expr -> expr MOD expr .)
    OR              reduce using rule 37 (expr -> expr MOD expr .)
    EQ              reduce using rule 37 (expr -> expr MOD expr .)
    GT              reduce using rule 37 (expr -> expr MOD expr .)
    GTE             reduce using rule 37 (expr -> expr MOD expr .)
    LT              reduce using rule 37 (expr -> expr MOD expr .)
    LTE             reduce using rule 37 (expr -> expr MOD expr .)
    NEQ             reduce using rule 37 (expr -> expr MOD expr .)
    MOD             reduce using rule 37 (expr -> expr MOD expr .)
    REF             reduce using rule 37 (expr -> expr MOD expr .)
    $end            reduce using rule 37 (expr -> expr MOD expr .)
    THEN            reduce using rule 37 (expr -> expr MOD expr .)
    DO              reduce using rule 37 (expr -> expr MOD expr .)
    RPAREN          reduce using rule 37 (expr -> expr MOD expr .)
    COMMA           reduce using rule 37 (expr -> expr MOD expr .)
    ELSE            reduce using rule 37 (expr -> expr MOD expr .)
    END             reduce using rule 37 (expr -> expr MOD expr .)
    IN              reduce using rule 37 (expr -> expr MOD expr .)
    RCURL           reduce using rule 37 (expr -> expr MOD expr .)
    DOT             shift and go to state 20

  ! DOT             [ reduce using rule 37 (expr -> expr MOD expr .) ]
  ! ASSIGN          [ shift and go to state 18 ]
  ! SEMICOLON       [ shift and go to state 19 ]
  ! PLUS            [ shift and go to state 21 ]
  ! MINUS           [ shift and go to state 22 ]
  ! TIMES           [ shift and go to state 23 ]
  ! DIVIDE          [ shift and go to state 24 ]
  ! AND             [ shift and go to state 25 ]
  ! OR              [ shift and go to state 26 ]
  ! EQ              [ shift and go to state 27 ]
  ! GT              [ shift and go to state 28 ]
  ! GTE             [ shift and go to state 29 ]
  ! LT              [ shift and go to state 30 ]
  ! LTE             [ shift and go to state 31 ]
  ! NEQ             [ shift and go to state 32 ]
  ! MOD             [ shift and go to state 33 ]
  ! REF             [ shift and go to state 34 ]


state 67

    (17) expr -> LET ID ID . ASSIGN expr IN expr

    ASSIGN          shift and go to state 88


state 68

    (16) expr -> LET ID IN . expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 89

state 69

    (65) expr -> ID LPAREN exprlist . RPAREN

    RPAREN          shift and go to state 90


state 70

    (67) expr -> ID LPAREN RPAREN .

    ASSIGN          reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    DOT             reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    AND             reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    OR              reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    EQ              reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    GT              reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    GTE             reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    LT              reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    LTE             reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    NEQ             reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    MOD             reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    REF             reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    $end            reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    THEN            reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    DO              reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    END             reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    IN              reduce using rule 67 (expr -> ID LPAREN RPAREN .)
    RCURL           reduce using rule 67 (expr -> ID LPAREN RPAREN .)


state 71

    (66) expr -> ID LPAREN expr . RPAREN
    (63) exprlist -> expr . COMMA expr
    (64) exprlist -> expr . COMMA exprlist
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    RPAREN          shift and go to state 91
    COMMA           shift and go to state 92
    ASSIGN          shift and go to state 18
    SEMICOLON       shift and go to state 19
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33
    REF             shift and go to state 34


state 72

    (19) expr -> IF expr THEN . expr ELSE expr END
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 93

state 73

    (20) expr -> WHILE expr DO . expr END
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 94

state 74

    (22) expr -> PRINT LPAREN expr . RPAREN
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    RPAREN          shift and go to state 95
    ASSIGN          shift and go to state 18
    SEMICOLON       shift and go to state 19
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33
    REF             shift and go to state 34


state 75

    (42) expr -> LPAREN expr RPAREN .

    ASSIGN          reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    DOT             reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    GTE             reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    LTE             reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    NEQ             reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    MOD             reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    REF             reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    THEN            reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    DO              reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    ELSE            reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    END             reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    IN              reduce using rule 42 (expr -> LPAREN expr RPAREN .)
    RCURL           reduce using rule 42 (expr -> LPAREN expr RPAREN .)


state 76

    (23) expr -> DESTROY LPAREN expr . RPAREN
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    RPAREN          shift and go to state 96
    ASSIGN          shift and go to state 18
    SEMICOLON       shift and go to state 19
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33
    REF             shift and go to state 34


state 77

    (49) expr -> BRANCH LPAREN varlist . RPAREN expr END

    RPAREN          shift and go to state 97


state 78

    (51) expr -> BRANCH LPAREN RPAREN . expr END
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 98

state 79

    (50) expr -> BRANCH LPAREN ID . RPAREN expr END
    (47) varlist -> ID . COMMA ID
    (48) varlist -> ID . COMMA varlist

    RPAREN          shift and go to state 99
    COMMA           shift and go to state 100


state 80

    (55) expr -> LCURL fieldlist RCURL .

    ASSIGN          reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    SEMICOLON       reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    DOT             reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    PLUS            reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    MINUS           reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    TIMES           reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    DIVIDE          reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    AND             reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    OR              reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    EQ              reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    GT              reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    GTE             reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    LT              reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    LTE             reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    NEQ             reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    MOD             reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    REF             reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    $end            reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    THEN            reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    DO              reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    RPAREN          reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    COMMA           reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    ELSE            reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    END             reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    IN              reduce using rule 55 (expr -> LCURL fieldlist RCURL .)
    RCURL           reduce using rule 55 (expr -> LCURL fieldlist RCURL .)


state 81

    (56) expr -> LCURL field RCURL .

    ASSIGN          reduce using rule 56 (expr -> LCURL field RCURL .)
    SEMICOLON       reduce using rule 56 (expr -> LCURL field RCURL .)
    DOT             reduce using rule 56 (expr -> LCURL field RCURL .)
    PLUS            reduce using rule 56 (expr -> LCURL field RCURL .)
    MINUS           reduce using rule 56 (expr -> LCURL field RCURL .)
    TIMES           reduce using rule 56 (expr -> LCURL field RCURL .)
    DIVIDE          reduce using rule 56 (expr -> LCURL field RCURL .)
    AND             reduce using rule 56 (expr -> LCURL field RCURL .)
    OR              reduce using rule 56 (expr -> LCURL field RCURL .)
    EQ              reduce using rule 56 (expr -> LCURL field RCURL .)
    GT              reduce using rule 56 (expr -> LCURL field RCURL .)
    GTE             reduce using rule 56 (expr -> LCURL field RCURL .)
    LT              reduce using rule 56 (expr -> LCURL field RCURL .)
    LTE             reduce using rule 56 (expr -> LCURL field RCURL .)
    NEQ             reduce using rule 56 (expr -> LCURL field RCURL .)
    MOD             reduce using rule 56 (expr -> LCURL field RCURL .)
    REF             reduce using rule 56 (expr -> LCURL field RCURL .)
    $end            reduce using rule 56 (expr -> LCURL field RCURL .)
    THEN            reduce using rule 56 (expr -> LCURL field RCURL .)
    DO              reduce using rule 56 (expr -> LCURL field RCURL .)
    RPAREN          reduce using rule 56 (expr -> LCURL field RCURL .)
    COMMA           reduce using rule 56 (expr -> LCURL field RCURL .)
    ELSE            reduce using rule 56 (expr -> LCURL field RCURL .)
    END             reduce using rule 56 (expr -> LCURL field RCURL .)
    IN              reduce using rule 56 (expr -> LCURL field RCURL .)
    RCURL           reduce using rule 56 (expr -> LCURL field RCURL .)


state 82

    (53) fieldlist -> field COMMA . field
    (54) fieldlist -> field COMMA . fieldlist
    (52) field -> . ID ASSIGN qualifier expr
    (53) fieldlist -> . field COMMA field
    (54) fieldlist -> . field COMMA fieldlist

    ID              shift and go to state 49

    field                          shift and go to state 101
    fieldlist                      shift and go to state 102

state 83

    (52) field -> ID ASSIGN . qualifier expr
    (13) qualifier -> . A
    (14) qualifier -> . B
    (15) qualifier -> . U

    A               shift and go to state 104
    B               shift and go to state 105
    U               shift and go to state 106

    qualifier                      shift and go to state 103

state 84

    (60) expr -> FUN LPAREN paramlist . RPAREN type ARROW expr END

    RPAREN          shift and go to state 107


state 85

    (62) expr -> FUN LPAREN RPAREN . type ARROW expr END
    (5) type -> . simple_type
    (8) type -> . LT paramlist GT
    (9) type -> . LT param GT
    (10) type -> . LBRAC tlist ARROW type RBRAC
    (11) type -> . LBRAC type ARROW type RBRAC
    (12) type -> . LBRAC ARROW type RBRAC
    (2) simple_type -> . INT
    (3) simple_type -> . BOOL
    (4) simple_type -> . UNIT

    LT              shift and go to state 110
    LBRAC           shift and go to state 111
    INT             shift and go to state 112
    BOOL            shift and go to state 113
    UNIT            shift and go to state 114

    type                           shift and go to state 108
    simple_type                    shift and go to state 109

state 86

    (61) expr -> FUN LPAREN param . RPAREN type ARROW expr END
    (58) paramlist -> param . COMMA param
    (59) paramlist -> param . COMMA paramlist

    RPAREN          shift and go to state 115
    COMMA           shift and go to state 116


state 87

    (57) param -> ID . COLON qualifier type

    COLON           shift and go to state 117


state 88

    (17) expr -> LET ID ID ASSIGN . expr IN expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 118

state 89

    (16) expr -> LET ID IN expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    ASSIGN          reduce using rule 16 (expr -> LET ID IN expr .)
    SEMICOLON       reduce using rule 16 (expr -> LET ID IN expr .)
    AND             reduce using rule 16 (expr -> LET ID IN expr .)
    OR              reduce using rule 16 (expr -> LET ID IN expr .)
    REF             reduce using rule 16 (expr -> LET ID IN expr .)
    $end            reduce using rule 16 (expr -> LET ID IN expr .)
    THEN            reduce using rule 16 (expr -> LET ID IN expr .)
    DO              reduce using rule 16 (expr -> LET ID IN expr .)
    RPAREN          reduce using rule 16 (expr -> LET ID IN expr .)
    COMMA           reduce using rule 16 (expr -> LET ID IN expr .)
    ELSE            reduce using rule 16 (expr -> LET ID IN expr .)
    END             reduce using rule 16 (expr -> LET ID IN expr .)
    IN              reduce using rule 16 (expr -> LET ID IN expr .)
    RCURL           reduce using rule 16 (expr -> LET ID IN expr .)
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33

  ! DOT             [ reduce using rule 16 (expr -> LET ID IN expr .) ]
  ! PLUS            [ reduce using rule 16 (expr -> LET ID IN expr .) ]
  ! MINUS           [ reduce using rule 16 (expr -> LET ID IN expr .) ]
  ! TIMES           [ reduce using rule 16 (expr -> LET ID IN expr .) ]
  ! DIVIDE          [ reduce using rule 16 (expr -> LET ID IN expr .) ]
  ! EQ              [ reduce using rule 16 (expr -> LET ID IN expr .) ]
  ! GT              [ reduce using rule 16 (expr -> LET ID IN expr .) ]
  ! GTE             [ reduce using rule 16 (expr -> LET ID IN expr .) ]
  ! LT              [ reduce using rule 16 (expr -> LET ID IN expr .) ]
  ! LTE             [ reduce using rule 16 (expr -> LET ID IN expr .) ]
  ! NEQ             [ reduce using rule 16 (expr -> LET ID IN expr .) ]
  ! MOD             [ reduce using rule 16 (expr -> LET ID IN expr .) ]
  ! ASSIGN          [ shift and go to state 18 ]
  ! SEMICOLON       [ shift and go to state 19 ]
  ! AND             [ shift and go to state 25 ]
  ! OR              [ shift and go to state 26 ]
  ! REF             [ shift and go to state 34 ]


state 90

    (65) expr -> ID LPAREN exprlist RPAREN .

    ASSIGN          reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    SEMICOLON       reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    DOT             reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    PLUS            reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    MINUS           reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    TIMES           reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    DIVIDE          reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    AND             reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    OR              reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    EQ              reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    GT              reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    GTE             reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    LT              reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    LTE             reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    NEQ             reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    MOD             reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    REF             reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    $end            reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    THEN            reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    DO              reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    RPAREN          reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    COMMA           reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    ELSE            reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    END             reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    IN              reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)
    RCURL           reduce using rule 65 (expr -> ID LPAREN exprlist RPAREN .)


state 91

    (66) expr -> ID LPAREN expr RPAREN .

    ASSIGN          reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    DOT             reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    PLUS            reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    MINUS           reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    TIMES           reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    AND             reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    OR              reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    EQ              reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    GT              reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    GTE             reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    LT              reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    LTE             reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    NEQ             reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    MOD             reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    REF             reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    $end            reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    THEN            reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    DO              reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    RPAREN          reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    COMMA           reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    ELSE            reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    END             reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    IN              reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)
    RCURL           reduce using rule 66 (expr -> ID LPAREN expr RPAREN .)


state 92

    (63) exprlist -> expr COMMA . expr
    (64) exprlist -> expr COMMA . exprlist
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN
    (63) exprlist -> . expr COMMA expr
    (64) exprlist -> . expr COMMA exprlist

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 119
    exprlist                       shift and go to state 120

state 93

    (19) expr -> IF expr THEN expr . ELSE expr END
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    ELSE            shift and go to state 121
    ASSIGN          shift and go to state 18
    SEMICOLON       shift and go to state 19
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33
    REF             shift and go to state 34


state 94

    (20) expr -> WHILE expr DO expr . END
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    END             shift and go to state 122
    ASSIGN          shift and go to state 18
    SEMICOLON       shift and go to state 19
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33
    REF             shift and go to state 34


state 95

    (22) expr -> PRINT LPAREN expr RPAREN .

    ASSIGN          reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    DOT             reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    PLUS            reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    MINUS           reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    TIMES           reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    AND             reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    OR              reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    EQ              reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    GT              reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    GTE             reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    LT              reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    LTE             reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    NEQ             reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    MOD             reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    REF             reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    $end            reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    THEN            reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    DO              reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    RPAREN          reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    COMMA           reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    ELSE            reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    END             reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    IN              reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)
    RCURL           reduce using rule 22 (expr -> PRINT LPAREN expr RPAREN .)


state 96

    (23) expr -> DESTROY LPAREN expr RPAREN .

    ASSIGN          reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    SEMICOLON       reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    DOT             reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    PLUS            reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    MINUS           reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    TIMES           reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    AND             reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    OR              reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    EQ              reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    GT              reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    GTE             reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    LT              reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    LTE             reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    NEQ             reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    MOD             reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    REF             reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    $end            reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    THEN            reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    DO              reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    RPAREN          reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    COMMA           reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    ELSE            reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    END             reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    IN              reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)
    RCURL           reduce using rule 23 (expr -> DESTROY LPAREN expr RPAREN .)


state 97

    (49) expr -> BRANCH LPAREN varlist RPAREN . expr END
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 123

state 98

    (51) expr -> BRANCH LPAREN RPAREN expr . END
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    END             shift and go to state 124
    ASSIGN          shift and go to state 18
    SEMICOLON       shift and go to state 19
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33
    REF             shift and go to state 34


state 99

    (50) expr -> BRANCH LPAREN ID RPAREN . expr END
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 125

state 100

    (47) varlist -> ID COMMA . ID
    (48) varlist -> ID COMMA . varlist
    (47) varlist -> . ID COMMA ID
    (48) varlist -> . ID COMMA varlist

    ID              shift and go to state 126

    varlist                        shift and go to state 127

state 101

    (53) fieldlist -> field COMMA field .
    (53) fieldlist -> field . COMMA field
    (54) fieldlist -> field . COMMA fieldlist

    RCURL           reduce using rule 53 (fieldlist -> field COMMA field .)
    COMMA           shift and go to state 82


state 102

    (54) fieldlist -> field COMMA fieldlist .

    RCURL           reduce using rule 54 (fieldlist -> field COMMA fieldlist .)


state 103

    (52) field -> ID ASSIGN qualifier . expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 128

state 104

    (13) qualifier -> A .

    LET             reduce using rule 13 (qualifier -> A .)
    IF              reduce using rule 13 (qualifier -> A .)
    WHILE           reduce using rule 13 (qualifier -> A .)
    PRINT           reduce using rule 13 (qualifier -> A .)
    DESTROY         reduce using rule 13 (qualifier -> A .)
    MINUS           reduce using rule 13 (qualifier -> A .)
    NOT             reduce using rule 13 (qualifier -> A .)
    TIMES           reduce using rule 13 (qualifier -> A .)
    LPAREN          reduce using rule 13 (qualifier -> A .)
    INT_LITERAL     reduce using rule 13 (qualifier -> A .)
    BOOL_LITERAL    reduce using rule 13 (qualifier -> A .)
    ID              reduce using rule 13 (qualifier -> A .)
    BRANCH          reduce using rule 13 (qualifier -> A .)
    LCURL           reduce using rule 13 (qualifier -> A .)
    FUN             reduce using rule 13 (qualifier -> A .)
    LT              reduce using rule 13 (qualifier -> A .)
    LBRAC           reduce using rule 13 (qualifier -> A .)
    INT             reduce using rule 13 (qualifier -> A .)
    BOOL            reduce using rule 13 (qualifier -> A .)
    UNIT            reduce using rule 13 (qualifier -> A .)


state 105

    (14) qualifier -> B .

    LET             reduce using rule 14 (qualifier -> B .)
    IF              reduce using rule 14 (qualifier -> B .)
    WHILE           reduce using rule 14 (qualifier -> B .)
    PRINT           reduce using rule 14 (qualifier -> B .)
    DESTROY         reduce using rule 14 (qualifier -> B .)
    MINUS           reduce using rule 14 (qualifier -> B .)
    NOT             reduce using rule 14 (qualifier -> B .)
    TIMES           reduce using rule 14 (qualifier -> B .)
    LPAREN          reduce using rule 14 (qualifier -> B .)
    INT_LITERAL     reduce using rule 14 (qualifier -> B .)
    BOOL_LITERAL    reduce using rule 14 (qualifier -> B .)
    ID              reduce using rule 14 (qualifier -> B .)
    BRANCH          reduce using rule 14 (qualifier -> B .)
    LCURL           reduce using rule 14 (qualifier -> B .)
    FUN             reduce using rule 14 (qualifier -> B .)
    LT              reduce using rule 14 (qualifier -> B .)
    LBRAC           reduce using rule 14 (qualifier -> B .)
    INT             reduce using rule 14 (qualifier -> B .)
    BOOL            reduce using rule 14 (qualifier -> B .)
    UNIT            reduce using rule 14 (qualifier -> B .)


state 106

    (15) qualifier -> U .

    LET             reduce using rule 15 (qualifier -> U .)
    IF              reduce using rule 15 (qualifier -> U .)
    WHILE           reduce using rule 15 (qualifier -> U .)
    PRINT           reduce using rule 15 (qualifier -> U .)
    DESTROY         reduce using rule 15 (qualifier -> U .)
    MINUS           reduce using rule 15 (qualifier -> U .)
    NOT             reduce using rule 15 (qualifier -> U .)
    TIMES           reduce using rule 15 (qualifier -> U .)
    LPAREN          reduce using rule 15 (qualifier -> U .)
    INT_LITERAL     reduce using rule 15 (qualifier -> U .)
    BOOL_LITERAL    reduce using rule 15 (qualifier -> U .)
    ID              reduce using rule 15 (qualifier -> U .)
    BRANCH          reduce using rule 15 (qualifier -> U .)
    LCURL           reduce using rule 15 (qualifier -> U .)
    FUN             reduce using rule 15 (qualifier -> U .)
    LT              reduce using rule 15 (qualifier -> U .)
    LBRAC           reduce using rule 15 (qualifier -> U .)
    INT             reduce using rule 15 (qualifier -> U .)
    BOOL            reduce using rule 15 (qualifier -> U .)
    UNIT            reduce using rule 15 (qualifier -> U .)


state 107

    (60) expr -> FUN LPAREN paramlist RPAREN . type ARROW expr END
    (5) type -> . simple_type
    (8) type -> . LT paramlist GT
    (9) type -> . LT param GT
    (10) type -> . LBRAC tlist ARROW type RBRAC
    (11) type -> . LBRAC type ARROW type RBRAC
    (12) type -> . LBRAC ARROW type RBRAC
    (2) simple_type -> . INT
    (3) simple_type -> . BOOL
    (4) simple_type -> . UNIT

    LT              shift and go to state 110
    LBRAC           shift and go to state 111
    INT             shift and go to state 112
    BOOL            shift and go to state 113
    UNIT            shift and go to state 114

    type                           shift and go to state 129
    simple_type                    shift and go to state 109

state 108

    (62) expr -> FUN LPAREN RPAREN type . ARROW expr END

    ARROW           shift and go to state 130


state 109

    (5) type -> simple_type .

    ARROW           reduce using rule 5 (type -> simple_type .)
    COMMA           reduce using rule 5 (type -> simple_type .)
    RBRAC           reduce using rule 5 (type -> simple_type .)
    RPAREN          reduce using rule 5 (type -> simple_type .)
    GT              reduce using rule 5 (type -> simple_type .)


state 110

    (8) type -> LT . paramlist GT
    (9) type -> LT . param GT
    (58) paramlist -> . param COMMA param
    (59) paramlist -> . param COMMA paramlist
    (57) param -> . ID COLON qualifier type

    ID              shift and go to state 87

    paramlist                      shift and go to state 131
    param                          shift and go to state 132

state 111

    (10) type -> LBRAC . tlist ARROW type RBRAC
    (11) type -> LBRAC . type ARROW type RBRAC
    (12) type -> LBRAC . ARROW type RBRAC
    (6) tlist -> . type COMMA type
    (7) tlist -> . type COMMA tlist
    (5) type -> . simple_type
    (8) type -> . LT paramlist GT
    (9) type -> . LT param GT
    (10) type -> . LBRAC tlist ARROW type RBRAC
    (11) type -> . LBRAC type ARROW type RBRAC
    (12) type -> . LBRAC ARROW type RBRAC
    (2) simple_type -> . INT
    (3) simple_type -> . BOOL
    (4) simple_type -> . UNIT

    ARROW           shift and go to state 134
    LT              shift and go to state 110
    LBRAC           shift and go to state 111
    INT             shift and go to state 112
    BOOL            shift and go to state 113
    UNIT            shift and go to state 114

    tlist                          shift and go to state 133
    type                           shift and go to state 135
    simple_type                    shift and go to state 109

state 112

    (2) simple_type -> INT .

    ARROW           reduce using rule 2 (simple_type -> INT .)
    COMMA           reduce using rule 2 (simple_type -> INT .)
    RBRAC           reduce using rule 2 (simple_type -> INT .)
    RPAREN          reduce using rule 2 (simple_type -> INT .)
    GT              reduce using rule 2 (simple_type -> INT .)


state 113

    (3) simple_type -> BOOL .

    ARROW           reduce using rule 3 (simple_type -> BOOL .)
    COMMA           reduce using rule 3 (simple_type -> BOOL .)
    RBRAC           reduce using rule 3 (simple_type -> BOOL .)
    RPAREN          reduce using rule 3 (simple_type -> BOOL .)
    GT              reduce using rule 3 (simple_type -> BOOL .)


state 114

    (4) simple_type -> UNIT .

    ARROW           reduce using rule 4 (simple_type -> UNIT .)
    COMMA           reduce using rule 4 (simple_type -> UNIT .)
    RBRAC           reduce using rule 4 (simple_type -> UNIT .)
    RPAREN          reduce using rule 4 (simple_type -> UNIT .)
    GT              reduce using rule 4 (simple_type -> UNIT .)


state 115

    (61) expr -> FUN LPAREN param RPAREN . type ARROW expr END
    (5) type -> . simple_type
    (8) type -> . LT paramlist GT
    (9) type -> . LT param GT
    (10) type -> . LBRAC tlist ARROW type RBRAC
    (11) type -> . LBRAC type ARROW type RBRAC
    (12) type -> . LBRAC ARROW type RBRAC
    (2) simple_type -> . INT
    (3) simple_type -> . BOOL
    (4) simple_type -> . UNIT

    LT              shift and go to state 110
    LBRAC           shift and go to state 111
    INT             shift and go to state 112
    BOOL            shift and go to state 113
    UNIT            shift and go to state 114

    type                           shift and go to state 136
    simple_type                    shift and go to state 109

state 116

    (58) paramlist -> param COMMA . param
    (59) paramlist -> param COMMA . paramlist
    (57) param -> . ID COLON qualifier type
    (58) paramlist -> . param COMMA param
    (59) paramlist -> . param COMMA paramlist

    ID              shift and go to state 87

    param                          shift and go to state 137
    paramlist                      shift and go to state 138

state 117

    (57) param -> ID COLON . qualifier type
    (13) qualifier -> . A
    (14) qualifier -> . B
    (15) qualifier -> . U

    A               shift and go to state 104
    B               shift and go to state 105
    U               shift and go to state 106

    qualifier                      shift and go to state 139

state 118

    (17) expr -> LET ID ID ASSIGN expr . IN expr
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    IN              shift and go to state 140
    ASSIGN          shift and go to state 18
    SEMICOLON       shift and go to state 19
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33
    REF             shift and go to state 34


state 119

    (63) exprlist -> expr COMMA expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF
    (63) exprlist -> expr . COMMA expr
    (64) exprlist -> expr . COMMA exprlist

    RPAREN          reduce using rule 63 (exprlist -> expr COMMA expr .)
    ASSIGN          shift and go to state 18
    SEMICOLON       shift and go to state 19
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33
    REF             shift and go to state 34
    COMMA           shift and go to state 92


state 120

    (64) exprlist -> expr COMMA exprlist .

    RPAREN          reduce using rule 64 (exprlist -> expr COMMA exprlist .)


state 121

    (19) expr -> IF expr THEN expr ELSE . expr END
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 141

state 122

    (20) expr -> WHILE expr DO expr END .

    ASSIGN          reduce using rule 20 (expr -> WHILE expr DO expr END .)
    SEMICOLON       reduce using rule 20 (expr -> WHILE expr DO expr END .)
    DOT             reduce using rule 20 (expr -> WHILE expr DO expr END .)
    PLUS            reduce using rule 20 (expr -> WHILE expr DO expr END .)
    MINUS           reduce using rule 20 (expr -> WHILE expr DO expr END .)
    TIMES           reduce using rule 20 (expr -> WHILE expr DO expr END .)
    DIVIDE          reduce using rule 20 (expr -> WHILE expr DO expr END .)
    AND             reduce using rule 20 (expr -> WHILE expr DO expr END .)
    OR              reduce using rule 20 (expr -> WHILE expr DO expr END .)
    EQ              reduce using rule 20 (expr -> WHILE expr DO expr END .)
    GT              reduce using rule 20 (expr -> WHILE expr DO expr END .)
    GTE             reduce using rule 20 (expr -> WHILE expr DO expr END .)
    LT              reduce using rule 20 (expr -> WHILE expr DO expr END .)
    LTE             reduce using rule 20 (expr -> WHILE expr DO expr END .)
    NEQ             reduce using rule 20 (expr -> WHILE expr DO expr END .)
    MOD             reduce using rule 20 (expr -> WHILE expr DO expr END .)
    REF             reduce using rule 20 (expr -> WHILE expr DO expr END .)
    $end            reduce using rule 20 (expr -> WHILE expr DO expr END .)
    THEN            reduce using rule 20 (expr -> WHILE expr DO expr END .)
    DO              reduce using rule 20 (expr -> WHILE expr DO expr END .)
    RPAREN          reduce using rule 20 (expr -> WHILE expr DO expr END .)
    COMMA           reduce using rule 20 (expr -> WHILE expr DO expr END .)
    ELSE            reduce using rule 20 (expr -> WHILE expr DO expr END .)
    END             reduce using rule 20 (expr -> WHILE expr DO expr END .)
    IN              reduce using rule 20 (expr -> WHILE expr DO expr END .)
    RCURL           reduce using rule 20 (expr -> WHILE expr DO expr END .)


state 123

    (49) expr -> BRANCH LPAREN varlist RPAREN expr . END
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    END             shift and go to state 142
    ASSIGN          shift and go to state 18
    SEMICOLON       shift and go to state 19
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33
    REF             shift and go to state 34


state 124

    (51) expr -> BRANCH LPAREN RPAREN expr END .

    ASSIGN          reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    SEMICOLON       reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    DOT             reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    PLUS            reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    MINUS           reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    TIMES           reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    DIVIDE          reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    AND             reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    OR              reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    EQ              reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    GT              reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    GTE             reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    LT              reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    LTE             reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    NEQ             reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    MOD             reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    REF             reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    $end            reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    THEN            reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    DO              reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    RPAREN          reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    COMMA           reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    ELSE            reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    END             reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    IN              reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)
    RCURL           reduce using rule 51 (expr -> BRANCH LPAREN RPAREN expr END .)


state 125

    (50) expr -> BRANCH LPAREN ID RPAREN expr . END
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    END             shift and go to state 143
    ASSIGN          shift and go to state 18
    SEMICOLON       shift and go to state 19
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33
    REF             shift and go to state 34


state 126

    (47) varlist -> ID COMMA ID .
    (47) varlist -> ID . COMMA ID
    (48) varlist -> ID . COMMA varlist

    RPAREN          reduce using rule 47 (varlist -> ID COMMA ID .)
    COMMA           shift and go to state 100


state 127

    (48) varlist -> ID COMMA varlist .

    RPAREN          reduce using rule 48 (varlist -> ID COMMA varlist .)


state 128

    (52) field -> ID ASSIGN qualifier expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    RCURL           reduce using rule 52 (field -> ID ASSIGN qualifier expr .)
    COMMA           reduce using rule 52 (field -> ID ASSIGN qualifier expr .)
    ASSIGN          shift and go to state 18
    SEMICOLON       shift and go to state 19
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33
    REF             shift and go to state 34


state 129

    (60) expr -> FUN LPAREN paramlist RPAREN type . ARROW expr END

    ARROW           shift and go to state 144


state 130

    (62) expr -> FUN LPAREN RPAREN type ARROW . expr END
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 145

state 131

    (8) type -> LT paramlist . GT

    GT              shift and go to state 146


state 132

    (9) type -> LT param . GT
    (58) paramlist -> param . COMMA param
    (59) paramlist -> param . COMMA paramlist

    GT              shift and go to state 147
    COMMA           shift and go to state 116


state 133

    (10) type -> LBRAC tlist . ARROW type RBRAC

    ARROW           shift and go to state 148


state 134

    (12) type -> LBRAC ARROW . type RBRAC
    (5) type -> . simple_type
    (8) type -> . LT paramlist GT
    (9) type -> . LT param GT
    (10) type -> . LBRAC tlist ARROW type RBRAC
    (11) type -> . LBRAC type ARROW type RBRAC
    (12) type -> . LBRAC ARROW type RBRAC
    (2) simple_type -> . INT
    (3) simple_type -> . BOOL
    (4) simple_type -> . UNIT

    LT              shift and go to state 110
    LBRAC           shift and go to state 111
    INT             shift and go to state 112
    BOOL            shift and go to state 113
    UNIT            shift and go to state 114

    type                           shift and go to state 149
    simple_type                    shift and go to state 109

state 135

    (11) type -> LBRAC type . ARROW type RBRAC
    (6) tlist -> type . COMMA type
    (7) tlist -> type . COMMA tlist

    ARROW           shift and go to state 150
    COMMA           shift and go to state 151


state 136

    (61) expr -> FUN LPAREN param RPAREN type . ARROW expr END

    ARROW           shift and go to state 152


state 137

    (58) paramlist -> param COMMA param .
    (58) paramlist -> param . COMMA param
    (59) paramlist -> param . COMMA paramlist

    RPAREN          reduce using rule 58 (paramlist -> param COMMA param .)
    GT              reduce using rule 58 (paramlist -> param COMMA param .)
    COMMA           shift and go to state 116


state 138

    (59) paramlist -> param COMMA paramlist .

    RPAREN          reduce using rule 59 (paramlist -> param COMMA paramlist .)
    GT              reduce using rule 59 (paramlist -> param COMMA paramlist .)


state 139

    (57) param -> ID COLON qualifier . type
    (5) type -> . simple_type
    (8) type -> . LT paramlist GT
    (9) type -> . LT param GT
    (10) type -> . LBRAC tlist ARROW type RBRAC
    (11) type -> . LBRAC type ARROW type RBRAC
    (12) type -> . LBRAC ARROW type RBRAC
    (2) simple_type -> . INT
    (3) simple_type -> . BOOL
    (4) simple_type -> . UNIT

    LT              shift and go to state 110
    LBRAC           shift and go to state 111
    INT             shift and go to state 112
    BOOL            shift and go to state 113
    UNIT            shift and go to state 114

    type                           shift and go to state 153
    simple_type                    shift and go to state 109

state 140

    (17) expr -> LET ID ID ASSIGN expr IN . expr
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 154

state 141

    (19) expr -> IF expr THEN expr ELSE expr . END
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    END             shift and go to state 155
    ASSIGN          shift and go to state 18
    SEMICOLON       shift and go to state 19
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33
    REF             shift and go to state 34


state 142

    (49) expr -> BRANCH LPAREN varlist RPAREN expr END .

    ASSIGN          reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    SEMICOLON       reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    DOT             reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    PLUS            reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    MINUS           reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    TIMES           reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    DIVIDE          reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    AND             reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    OR              reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    EQ              reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    GT              reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    GTE             reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    LT              reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    LTE             reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    NEQ             reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    MOD             reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    REF             reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    $end            reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    THEN            reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    DO              reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    RPAREN          reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    COMMA           reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    ELSE            reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    END             reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    IN              reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)
    RCURL           reduce using rule 49 (expr -> BRANCH LPAREN varlist RPAREN expr END .)


state 143

    (50) expr -> BRANCH LPAREN ID RPAREN expr END .

    ASSIGN          reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    SEMICOLON       reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    DOT             reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    PLUS            reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    MINUS           reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    TIMES           reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    DIVIDE          reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    AND             reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    OR              reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    EQ              reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    GT              reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    GTE             reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    LT              reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    LTE             reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    NEQ             reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    MOD             reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    REF             reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    $end            reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    THEN            reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    DO              reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    RPAREN          reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    COMMA           reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    ELSE            reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    END             reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    IN              reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)
    RCURL           reduce using rule 50 (expr -> BRANCH LPAREN ID RPAREN expr END .)


state 144

    (60) expr -> FUN LPAREN paramlist RPAREN type ARROW . expr END
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 156

state 145

    (62) expr -> FUN LPAREN RPAREN type ARROW expr . END
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    END             shift and go to state 157
    ASSIGN          shift and go to state 18
    SEMICOLON       shift and go to state 19
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33
    REF             shift and go to state 34


state 146

    (8) type -> LT paramlist GT .

    ARROW           reduce using rule 8 (type -> LT paramlist GT .)
    COMMA           reduce using rule 8 (type -> LT paramlist GT .)
    RBRAC           reduce using rule 8 (type -> LT paramlist GT .)
    RPAREN          reduce using rule 8 (type -> LT paramlist GT .)
    GT              reduce using rule 8 (type -> LT paramlist GT .)


state 147

    (9) type -> LT param GT .

    ARROW           reduce using rule 9 (type -> LT param GT .)
    COMMA           reduce using rule 9 (type -> LT param GT .)
    RBRAC           reduce using rule 9 (type -> LT param GT .)
    RPAREN          reduce using rule 9 (type -> LT param GT .)
    GT              reduce using rule 9 (type -> LT param GT .)


state 148

    (10) type -> LBRAC tlist ARROW . type RBRAC
    (5) type -> . simple_type
    (8) type -> . LT paramlist GT
    (9) type -> . LT param GT
    (10) type -> . LBRAC tlist ARROW type RBRAC
    (11) type -> . LBRAC type ARROW type RBRAC
    (12) type -> . LBRAC ARROW type RBRAC
    (2) simple_type -> . INT
    (3) simple_type -> . BOOL
    (4) simple_type -> . UNIT

    LT              shift and go to state 110
    LBRAC           shift and go to state 111
    INT             shift and go to state 112
    BOOL            shift and go to state 113
    UNIT            shift and go to state 114

    type                           shift and go to state 158
    simple_type                    shift and go to state 109

state 149

    (12) type -> LBRAC ARROW type . RBRAC

    RBRAC           shift and go to state 159


state 150

    (11) type -> LBRAC type ARROW . type RBRAC
    (5) type -> . simple_type
    (8) type -> . LT paramlist GT
    (9) type -> . LT param GT
    (10) type -> . LBRAC tlist ARROW type RBRAC
    (11) type -> . LBRAC type ARROW type RBRAC
    (12) type -> . LBRAC ARROW type RBRAC
    (2) simple_type -> . INT
    (3) simple_type -> . BOOL
    (4) simple_type -> . UNIT

    LT              shift and go to state 110
    LBRAC           shift and go to state 111
    INT             shift and go to state 112
    BOOL            shift and go to state 113
    UNIT            shift and go to state 114

    type                           shift and go to state 160
    simple_type                    shift and go to state 109

state 151

    (6) tlist -> type COMMA . type
    (7) tlist -> type COMMA . tlist
    (5) type -> . simple_type
    (8) type -> . LT paramlist GT
    (9) type -> . LT param GT
    (10) type -> . LBRAC tlist ARROW type RBRAC
    (11) type -> . LBRAC type ARROW type RBRAC
    (12) type -> . LBRAC ARROW type RBRAC
    (6) tlist -> . type COMMA type
    (7) tlist -> . type COMMA tlist
    (2) simple_type -> . INT
    (3) simple_type -> . BOOL
    (4) simple_type -> . UNIT

    LT              shift and go to state 110
    LBRAC           shift and go to state 111
    INT             shift and go to state 112
    BOOL            shift and go to state 113
    UNIT            shift and go to state 114

    type                           shift and go to state 161
    tlist                          shift and go to state 162
    simple_type                    shift and go to state 109

state 152

    (61) expr -> FUN LPAREN param RPAREN type ARROW . expr END
    (16) expr -> . LET ID IN expr
    (17) expr -> . LET ID ID ASSIGN expr IN expr
    (18) expr -> . expr ASSIGN expr
    (19) expr -> . IF expr THEN expr ELSE expr END
    (20) expr -> . WHILE expr DO expr END
    (21) expr -> . expr SEMICOLON expr
    (22) expr -> . PRINT LPAREN expr RPAREN
    (23) expr -> . DESTROY LPAREN expr RPAREN
    (24) expr -> . expr DOT ID
    (25) expr -> . expr PLUS expr
    (26) expr -> . expr MINUS expr
    (27) expr -> . expr TIMES expr
    (28) expr -> . expr DIVIDE expr
    (29) expr -> . expr AND expr
    (30) expr -> . expr OR expr
    (31) expr -> . expr EQ expr
    (32) expr -> . expr GT expr
    (33) expr -> . expr GTE expr
    (34) expr -> . expr LT expr
    (35) expr -> . expr LTE expr
    (36) expr -> . expr NEQ expr
    (37) expr -> . expr MOD expr
    (38) expr -> . MINUS expr
    (39) expr -> . NOT expr
    (40) expr -> . TIMES expr
    (41) expr -> . expr REF
    (42) expr -> . LPAREN expr RPAREN
    (43) expr -> . LPAREN RPAREN
    (44) expr -> . INT_LITERAL
    (45) expr -> . BOOL_LITERAL
    (46) expr -> . ID
    (49) expr -> . BRANCH LPAREN varlist RPAREN expr END
    (50) expr -> . BRANCH LPAREN ID RPAREN expr END
    (51) expr -> . BRANCH LPAREN RPAREN expr END
    (55) expr -> . LCURL fieldlist RCURL
    (56) expr -> . LCURL field RCURL
    (60) expr -> . FUN LPAREN paramlist RPAREN type ARROW expr END
    (61) expr -> . FUN LPAREN param RPAREN type ARROW expr END
    (62) expr -> . FUN LPAREN RPAREN type ARROW expr END
    (65) expr -> . ID LPAREN exprlist RPAREN
    (66) expr -> . ID LPAREN expr RPAREN
    (67) expr -> . ID LPAREN RPAREN

    LET             shift and go to state 3
    IF              shift and go to state 5
    WHILE           shift and go to state 6
    PRINT           shift and go to state 7
    DESTROY         shift and go to state 9
    MINUS           shift and go to state 10
    NOT             shift and go to state 12
    TIMES           shift and go to state 11
    LPAREN          shift and go to state 8
    INT_LITERAL     shift and go to state 13
    BOOL_LITERAL    shift and go to state 14
    ID              shift and go to state 4
    BRANCH          shift and go to state 15
    LCURL           shift and go to state 16
    FUN             shift and go to state 17

    expr                           shift and go to state 163

state 153

    (57) param -> ID COLON qualifier type .

    RPAREN          reduce using rule 57 (param -> ID COLON qualifier type .)
    COMMA           reduce using rule 57 (param -> ID COLON qualifier type .)
    GT              reduce using rule 57 (param -> ID COLON qualifier type .)


state 154

    (17) expr -> LET ID ID ASSIGN expr IN expr .
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    ASSIGN          reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .)
    SEMICOLON       reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .)
    AND             reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .)
    OR              reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .)
    REF             reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .)
    $end            reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .)
    THEN            reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .)
    DO              reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .)
    RPAREN          reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .)
    COMMA           reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .)
    ELSE            reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .)
    END             reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .)
    IN              reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .)
    RCURL           reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .)
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33

  ! DOT             [ reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .) ]
  ! PLUS            [ reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .) ]
  ! MINUS           [ reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .) ]
  ! TIMES           [ reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .) ]
  ! DIVIDE          [ reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .) ]
  ! EQ              [ reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .) ]
  ! GT              [ reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .) ]
  ! GTE             [ reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .) ]
  ! LT              [ reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .) ]
  ! LTE             [ reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .) ]
  ! NEQ             [ reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .) ]
  ! MOD             [ reduce using rule 17 (expr -> LET ID ID ASSIGN expr IN expr .) ]
  ! ASSIGN          [ shift and go to state 18 ]
  ! SEMICOLON       [ shift and go to state 19 ]
  ! AND             [ shift and go to state 25 ]
  ! OR              [ shift and go to state 26 ]
  ! REF             [ shift and go to state 34 ]


state 155

    (19) expr -> IF expr THEN expr ELSE expr END .

    ASSIGN          reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    SEMICOLON       reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    DOT             reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    PLUS            reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    MINUS           reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    TIMES           reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    DIVIDE          reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    AND             reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    OR              reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    EQ              reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    GT              reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    GTE             reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    LT              reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    LTE             reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    NEQ             reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    MOD             reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    REF             reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    $end            reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    THEN            reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    DO              reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    RPAREN          reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    COMMA           reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    ELSE            reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    END             reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    IN              reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)
    RCURL           reduce using rule 19 (expr -> IF expr THEN expr ELSE expr END .)


state 156

    (60) expr -> FUN LPAREN paramlist RPAREN type ARROW expr . END
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    END             shift and go to state 164
    ASSIGN          shift and go to state 18
    SEMICOLON       shift and go to state 19
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33
    REF             shift and go to state 34


state 157

    (62) expr -> FUN LPAREN RPAREN type ARROW expr END .

    ASSIGN          reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    SEMICOLON       reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    DOT             reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    PLUS            reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    MINUS           reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    TIMES           reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    DIVIDE          reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    AND             reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    OR              reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    EQ              reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    GT              reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    GTE             reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    LT              reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    LTE             reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    NEQ             reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    MOD             reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    REF             reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    $end            reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    THEN            reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    DO              reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    RPAREN          reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    COMMA           reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    ELSE            reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    END             reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    IN              reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)
    RCURL           reduce using rule 62 (expr -> FUN LPAREN RPAREN type ARROW expr END .)


state 158

    (10) type -> LBRAC tlist ARROW type . RBRAC

    RBRAC           shift and go to state 165


state 159

    (12) type -> LBRAC ARROW type RBRAC .

    ARROW           reduce using rule 12 (type -> LBRAC ARROW type RBRAC .)
    COMMA           reduce using rule 12 (type -> LBRAC ARROW type RBRAC .)
    RBRAC           reduce using rule 12 (type -> LBRAC ARROW type RBRAC .)
    RPAREN          reduce using rule 12 (type -> LBRAC ARROW type RBRAC .)
    GT              reduce using rule 12 (type -> LBRAC ARROW type RBRAC .)


state 160

    (11) type -> LBRAC type ARROW type . RBRAC

    RBRAC           shift and go to state 166


state 161

    (6) tlist -> type COMMA type .
    (6) tlist -> type . COMMA type
    (7) tlist -> type . COMMA tlist

    ARROW           reduce using rule 6 (tlist -> type COMMA type .)
    COMMA           shift and go to state 151


state 162

    (7) tlist -> type COMMA tlist .

    ARROW           reduce using rule 7 (tlist -> type COMMA tlist .)


state 163

    (61) expr -> FUN LPAREN param RPAREN type ARROW expr . END
    (18) expr -> expr . ASSIGN expr
    (21) expr -> expr . SEMICOLON expr
    (24) expr -> expr . DOT ID
    (25) expr -> expr . PLUS expr
    (26) expr -> expr . MINUS expr
    (27) expr -> expr . TIMES expr
    (28) expr -> expr . DIVIDE expr
    (29) expr -> expr . AND expr
    (30) expr -> expr . OR expr
    (31) expr -> expr . EQ expr
    (32) expr -> expr . GT expr
    (33) expr -> expr . GTE expr
    (34) expr -> expr . LT expr
    (35) expr -> expr . LTE expr
    (36) expr -> expr . NEQ expr
    (37) expr -> expr . MOD expr
    (41) expr -> expr . REF

    END             shift and go to state 167
    ASSIGN          shift and go to state 18
    SEMICOLON       shift and go to state 19
    DOT             shift and go to state 20
    PLUS            shift and go to state 21
    MINUS           shift and go to state 22
    TIMES           shift and go to state 23
    DIVIDE          shift and go to state 24
    AND             shift and go to state 25
    OR              shift and go to state 26
    EQ              shift and go to state 27
    GT              shift and go to state 28
    GTE             shift and go to state 29
    LT              shift and go to state 30
    LTE             shift and go to state 31
    NEQ             shift and go to state 32
    MOD             shift and go to state 33
    REF             shift and go to state 34


state 164

    (60) expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .

    ASSIGN          reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    SEMICOLON       reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    DOT             reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    PLUS            reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    MINUS           reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    TIMES           reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    DIVIDE          reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    AND             reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    OR              reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    EQ              reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    GT              reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    GTE             reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    LT              reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    LTE             reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    NEQ             reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    MOD             reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    REF             reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    $end            reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    THEN            reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    DO              reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    RPAREN          reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    COMMA           reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    ELSE            reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    END             reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    IN              reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)
    RCURL           reduce using rule 60 (expr -> FUN LPAREN paramlist RPAREN type ARROW expr END .)


state 165

    (10) type -> LBRAC tlist ARROW type RBRAC .

    ARROW           reduce using rule 10 (type -> LBRAC tlist ARROW type RBRAC .)
    COMMA           reduce using rule 10 (type -> LBRAC tlist ARROW type RBRAC .)
    RBRAC           reduce using rule 10 (type -> LBRAC tlist ARROW type RBRAC .)
    RPAREN          reduce using rule 10 (type -> LBRAC tlist ARROW type RBRAC .)
    GT              reduce using rule 10 (type -> LBRAC tlist ARROW type RBRAC .)


state 166

    (11) type -> LBRAC type ARROW type RBRAC .

    ARROW           reduce using rule 11 (type -> LBRAC type ARROW type RBRAC .)
    COMMA           reduce using rule 11 (type -> LBRAC type ARROW type RBRAC .)
    RBRAC           reduce using rule 11 (type -> LBRAC type ARROW type RBRAC .)
    RPAREN          reduce using rule 11 (type -> LBRAC type ARROW type RBRAC .)
    GT              reduce using rule 11 (type -> LBRAC type ARROW type RBRAC .)


state 167

    (61) expr -> FUN LPAREN param RPAREN type ARROW expr END .

    ASSIGN          reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    SEMICOLON       reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    DOT             reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    PLUS            reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    MINUS           reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    TIMES           reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    DIVIDE          reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    AND             reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    OR              reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    EQ              reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    GT              reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    GTE             reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    LT              reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    LTE             reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    NEQ             reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    MOD             reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    REF             reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    $end            reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    THEN            reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    DO              reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    RPAREN          reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    COMMA           reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    ELSE            reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    END             reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    IN              reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)
    RCURL           reduce using rule 61 (expr -> FUN LPAREN param RPAREN type ARROW expr END .)

